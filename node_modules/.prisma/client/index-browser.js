
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.0.0
 * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
 */
Prisma.prismaVersion = {
  client: "4.0.0",
  engine: "da41d2bb3406da22087b849f0e911199ba4fbf11"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
});

exports.Prisma.SpecificationsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  car_id: 'car_id'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  username: 'username',
  password: 'password',
  email: 'email',
  driver_license: 'driver_license',
  isAdmin: 'isAdmin',
  created_at: 'created_at',
  avatar: 'avatar'
});

exports.Prisma.CarScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  daily_rate: 'daily_rate',
  available: 'available',
  license_plate: 'license_plate',
  fine_amount: 'fine_amount',
  brand: 'brand',
  created_at: 'created_at',
  category_id: 'category_id'
});

exports.Prisma.CarImagesScalarFieldEnum = makeEnum({
  id: 'id',
  image_name: 'image_name',
  car_id: 'car_id',
  created_at: 'created_at'
});

exports.Prisma.CarSpecificationScalarFieldEnum = makeEnum({
  car_id: 'car_id',
  specification_id: 'specification_id'
});

exports.Prisma.RentalsScalarFieldEnum = makeEnum({
  id: 'id',
  start_date: 'start_date',
  end_date: 'end_date',
  expect_return_date: 'expect_return_date',
  total: 'total',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  car_id: 'car_id'
});

exports.Prisma.UserRentalCarScalarFieldEnum = makeEnum({
  car_id: 'car_id',
  user_id: 'user_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Category: 'Category',
  Specifications: 'Specifications',
  User: 'User',
  Car: 'Car',
  CarImages: 'CarImages',
  CarSpecification: 'CarSpecification',
  Rentals: 'Rentals',
  UserRentalCar: 'UserRentalCar'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
