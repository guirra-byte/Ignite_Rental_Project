
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Category
 * 
 */
export type Category = {
  id: string
  name: string
  description: string
  created_at: Date
}

/**
 * Model Specifications
 * 
 */
export type Specifications = {
  id: string
  name: string
  description: string
  created_at: Date
  car_id: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  username: string
  password: string
  email: string
  driver_license: string
  isAdmin: boolean
  created_at: Date
  avatar: string | null
}

/**
 * Model Car
 * 
 */
export type Car = {
  id: string
  name: string
  description: string
  daily_rate: number
  available: boolean
  license_plate: string
  fine_amount: number
  brand: string
  created_at: Date
  category_id: string
}

/**
 * Model CarImages
 * 
 */
export type CarImages = {
  id: string
  image_name: string
  car_id: string
  created_at: Date
}

/**
 * Model CarSpecification
 * 
 */
export type CarSpecification = {
  car_id: string
  specification_id: string
}

/**
 * Model Rentals
 * 
 */
export type Rentals = {
  id: string
  start_date: Date
  end_date: Date | null
  expect_return_date: Date
  total: number | null
  created_at: Date
  updated_at: Date | null
  user_id: string
  car_id: string
}

/**
 * Model UserRentalCar
 * 
 */
export type UserRentalCar = {
  car_id: string
  user_id: string
}

/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = {
  id: string
  refresh_token: string
  user_id: string
  expires_in: Date
  machine_ip: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.specifications`: Exposes CRUD operations for the **Specifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specifications
    * const specifications = await prisma.specifications.findMany()
    * ```
    */
  get specifications(): Prisma.SpecificationsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.car`: Exposes CRUD operations for the **Car** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cars
    * const cars = await prisma.car.findMany()
    * ```
    */
  get car(): Prisma.CarDelegate<GlobalReject>;

  /**
   * `prisma.carImages`: Exposes CRUD operations for the **CarImages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarImages
    * const carImages = await prisma.carImages.findMany()
    * ```
    */
  get carImages(): Prisma.CarImagesDelegate<GlobalReject>;

  /**
   * `prisma.carSpecification`: Exposes CRUD operations for the **CarSpecification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarSpecifications
    * const carSpecifications = await prisma.carSpecification.findMany()
    * ```
    */
  get carSpecification(): Prisma.CarSpecificationDelegate<GlobalReject>;

  /**
   * `prisma.rentals`: Exposes CRUD operations for the **Rentals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rentals
    * const rentals = await prisma.rentals.findMany()
    * ```
    */
  get rentals(): Prisma.RentalsDelegate<GlobalReject>;

  /**
   * `prisma.userRentalCar`: Exposes CRUD operations for the **UserRentalCar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRentalCars
    * const userRentalCars = await prisma.userRentalCar.findMany()
    * ```
    */
  get userRentalCar(): Prisma.UserRentalCarDelegate<GlobalReject>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.0.0
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Category: 'Category',
    Specifications: 'Specifications',
    User: 'User',
    Car: 'Car',
    CarImages: 'CarImages',
    CarSpecification: 'CarSpecification',
    Rentals: 'Rentals',
    UserRentalCar: 'UserRentalCar',
    RefreshToken: 'RefreshToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    car: number
  }

  export type CategoryCountOutputTypeSelect = {
    car?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type SpecificationsCountOutputType
   */


  export type SpecificationsCountOutputType = {
    CarEspecification: number
  }

  export type SpecificationsCountOutputTypeSelect = {
    CarEspecification?: boolean
  }

  export type SpecificationsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SpecificationsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SpecificationsCountOutputType
    : S extends undefined
    ? never
    : S extends SpecificationsCountOutputTypeArgs
    ?'include' extends U
    ? SpecificationsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SpecificationsCountOutputType ? SpecificationsCountOutputType[P] : never
  } 
    : SpecificationsCountOutputType
  : SpecificationsCountOutputType




  // Custom InputTypes

  /**
   * SpecificationsCountOutputType without action
   */
  export type SpecificationsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SpecificationsCountOutputType
     * 
    **/
    select?: SpecificationsCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Rentals: number
    UserRentalCar: number
    RefreshToken: number
  }

  export type UserCountOutputTypeSelect = {
    Rentals?: boolean
    UserRentalCar?: boolean
    RefreshToken?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CarCountOutputType
   */


  export type CarCountOutputType = {
    CarSpecification: number
    Specifications: number
    CarImages: number
    Rentals: number
    UserRentalCar: number
  }

  export type CarCountOutputTypeSelect = {
    CarSpecification?: boolean
    Specifications?: boolean
    CarImages?: boolean
    Rentals?: boolean
    UserRentalCar?: boolean
  }

  export type CarCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CarCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CarCountOutputType
    : S extends undefined
    ? never
    : S extends CarCountOutputTypeArgs
    ?'include' extends U
    ? CarCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CarCountOutputType ? CarCountOutputType[P] : never
  } 
    : CarCountOutputType
  : CarCountOutputType




  // Custom InputTypes

  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CarCountOutputType
     * 
    **/
    select?: CarCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    created_at: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    name: string
    description: string
    created_at: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    car?: boolean | CarFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    car?: boolean | CarFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'car' ? Array < CarGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'car' ? Array < CarGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Find one Category that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    car<T extends CarFindManyArgs = {}>(args?: Subset<T, CarFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Car>>, PrismaPromise<Array<CarGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }

  /**
   * Category: findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category: findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category: findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = CategoryFindUniqueArgsBase
      

  /**
   * Category: findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = CategoryFindFirstArgsBase
      

  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Specifications
   */


  export type AggregateSpecifications = {
    _count: SpecificationsCountAggregateOutputType | null
    _min: SpecificationsMinAggregateOutputType | null
    _max: SpecificationsMaxAggregateOutputType | null
  }

  export type SpecificationsMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
    car_id: string | null
  }

  export type SpecificationsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
    car_id: string | null
  }

  export type SpecificationsCountAggregateOutputType = {
    id: number
    name: number
    description: number
    created_at: number
    car_id: number
    _all: number
  }


  export type SpecificationsMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    car_id?: true
  }

  export type SpecificationsMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    car_id?: true
  }

  export type SpecificationsCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    car_id?: true
    _all?: true
  }

  export type SpecificationsAggregateArgs = {
    /**
     * Filter which Specifications to aggregate.
     * 
    **/
    where?: SpecificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specifications to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SpecificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specifications
    **/
    _count?: true | SpecificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecificationsMaxAggregateInputType
  }

  export type GetSpecificationsAggregateType<T extends SpecificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecifications[P]>
      : GetScalarType<T[P], AggregateSpecifications[P]>
  }




  export type SpecificationsGroupByArgs = {
    where?: SpecificationsWhereInput
    orderBy?: Enumerable<SpecificationsOrderByWithAggregationInput>
    by: Array<SpecificationsScalarFieldEnum>
    having?: SpecificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecificationsCountAggregateInputType | true
    _min?: SpecificationsMinAggregateInputType
    _max?: SpecificationsMaxAggregateInputType
  }


  export type SpecificationsGroupByOutputType = {
    id: string
    name: string
    description: string
    created_at: Date
    car_id: string
    _count: SpecificationsCountAggregateOutputType | null
    _min: SpecificationsMinAggregateOutputType | null
    _max: SpecificationsMaxAggregateOutputType | null
  }

  type GetSpecificationsGroupByPayload<T extends SpecificationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SpecificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecificationsGroupByOutputType[P]>
            : GetScalarType<T[P], SpecificationsGroupByOutputType[P]>
        }
      >
    >


  export type SpecificationsSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    CarEspecification?: boolean | CarSpecificationFindManyArgs
    Car?: boolean | CarArgs
    car_id?: boolean
    _count?: boolean | SpecificationsCountOutputTypeArgs
  }

  export type SpecificationsInclude = {
    CarEspecification?: boolean | CarSpecificationFindManyArgs
    Car?: boolean | CarArgs
    _count?: boolean | SpecificationsCountOutputTypeArgs
  }

  export type SpecificationsGetPayload<
    S extends boolean | null | undefined | SpecificationsArgs,
    U = keyof S
      > = S extends true
        ? Specifications
    : S extends undefined
    ? never
    : S extends SpecificationsArgs | SpecificationsFindManyArgs
    ?'include' extends U
    ? Specifications  & {
    [P in TrueKeys<S['include']>]:
        P extends 'CarEspecification' ? Array < CarSpecificationGetPayload<S['include'][P]>>  :
        P extends 'Car' ? CarGetPayload<S['include'][P]> :
        P extends '_count' ? SpecificationsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'CarEspecification' ? Array < CarSpecificationGetPayload<S['select'][P]>>  :
        P extends 'Car' ? CarGetPayload<S['select'][P]> :
        P extends '_count' ? SpecificationsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Specifications ? Specifications[P] : never
  } 
    : Specifications
  : Specifications


  type SpecificationsCountArgs = Merge<
    Omit<SpecificationsFindManyArgs, 'select' | 'include'> & {
      select?: SpecificationsCountAggregateInputType | true
    }
  >

  export interface SpecificationsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Specifications that matches the filter.
     * @param {SpecificationsFindUniqueArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecificationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SpecificationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Specifications'> extends True ? CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>> : CheckSelect<T, Prisma__SpecificationsClient<Specifications | null >, Prisma__SpecificationsClient<SpecificationsGetPayload<T> | null >>

    /**
     * Find the first Specifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsFindFirstArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecificationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SpecificationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Specifications'> extends True ? CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>> : CheckSelect<T, Prisma__SpecificationsClient<Specifications | null >, Prisma__SpecificationsClient<SpecificationsGetPayload<T> | null >>

    /**
     * Find zero or more Specifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specifications
     * const specifications = await prisma.specifications.findMany()
     * 
     * // Get first 10 Specifications
     * const specifications = await prisma.specifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specificationsWithIdOnly = await prisma.specifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecificationsFindManyArgs>(
      args?: SelectSubset<T, SpecificationsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Specifications>>, PrismaPromise<Array<SpecificationsGetPayload<T>>>>

    /**
     * Create a Specifications.
     * @param {SpecificationsCreateArgs} args - Arguments to create a Specifications.
     * @example
     * // Create one Specifications
     * const Specifications = await prisma.specifications.create({
     *   data: {
     *     // ... data to create a Specifications
     *   }
     * })
     * 
    **/
    create<T extends SpecificationsCreateArgs>(
      args: SelectSubset<T, SpecificationsCreateArgs>
    ): CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>>

    /**
     * Create many Specifications.
     *     @param {SpecificationsCreateManyArgs} args - Arguments to create many Specifications.
     *     @example
     *     // Create many Specifications
     *     const specifications = await prisma.specifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecificationsCreateManyArgs>(
      args?: SelectSubset<T, SpecificationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Specifications.
     * @param {SpecificationsDeleteArgs} args - Arguments to delete one Specifications.
     * @example
     * // Delete one Specifications
     * const Specifications = await prisma.specifications.delete({
     *   where: {
     *     // ... filter to delete one Specifications
     *   }
     * })
     * 
    **/
    delete<T extends SpecificationsDeleteArgs>(
      args: SelectSubset<T, SpecificationsDeleteArgs>
    ): CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>>

    /**
     * Update one Specifications.
     * @param {SpecificationsUpdateArgs} args - Arguments to update one Specifications.
     * @example
     * // Update one Specifications
     * const specifications = await prisma.specifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecificationsUpdateArgs>(
      args: SelectSubset<T, SpecificationsUpdateArgs>
    ): CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>>

    /**
     * Delete zero or more Specifications.
     * @param {SpecificationsDeleteManyArgs} args - Arguments to filter Specifications to delete.
     * @example
     * // Delete a few Specifications
     * const { count } = await prisma.specifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecificationsDeleteManyArgs>(
      args?: SelectSubset<T, SpecificationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specifications
     * const specifications = await prisma.specifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecificationsUpdateManyArgs>(
      args: SelectSubset<T, SpecificationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Specifications.
     * @param {SpecificationsUpsertArgs} args - Arguments to update or create a Specifications.
     * @example
     * // Update or create a Specifications
     * const specifications = await prisma.specifications.upsert({
     *   create: {
     *     // ... data to create a Specifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specifications we want to update
     *   }
     * })
    **/
    upsert<T extends SpecificationsUpsertArgs>(
      args: SelectSubset<T, SpecificationsUpsertArgs>
    ): CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>>

    /**
     * Find one Specifications that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SpecificationsFindUniqueOrThrowArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecificationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SpecificationsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>>

    /**
     * Find the first Specifications that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsFindFirstOrThrowArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecificationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SpecificationsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecificationsClient<Specifications>, Prisma__SpecificationsClient<SpecificationsGetPayload<T>>>

    /**
     * Count the number of Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsCountArgs} args - Arguments to filter Specifications to count.
     * @example
     * // Count the number of Specifications
     * const count = await prisma.specifications.count({
     *   where: {
     *     // ... the filter for the Specifications we want to count
     *   }
     * })
    **/
    count<T extends SpecificationsCountArgs>(
      args?: Subset<T, SpecificationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecificationsAggregateArgs>(args: Subset<T, SpecificationsAggregateArgs>): PrismaPromise<GetSpecificationsAggregateType<T>>

    /**
     * Group by Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecificationsGroupByArgs['orderBy'] }
        : { orderBy?: SpecificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecificationsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Specifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SpecificationsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    CarEspecification<T extends CarSpecificationFindManyArgs = {}>(args?: Subset<T, CarSpecificationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CarSpecification>>, PrismaPromise<Array<CarSpecificationGetPayload<T>>>>;

    Car<T extends CarArgs = {}>(args?: Subset<T, CarArgs>): CheckSelect<T, Prisma__CarClient<Car | null >, Prisma__CarClient<CarGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Specifications base type for findUnique actions
   */
  export type SpecificationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
    /**
     * Filter, which Specifications to fetch.
     * 
    **/
    where: SpecificationsWhereUniqueInput
  }

  /**
   * Specifications: findUnique
   */
  export interface SpecificationsFindUniqueArgs extends SpecificationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specifications base type for findFirst actions
   */
  export type SpecificationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
    /**
     * Filter, which Specifications to fetch.
     * 
    **/
    where?: SpecificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specifications to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specifications.
     * 
    **/
    cursor?: SpecificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specifications.
     * 
    **/
    distinct?: Enumerable<SpecificationsScalarFieldEnum>
  }

  /**
   * Specifications: findFirst
   */
  export interface SpecificationsFindFirstArgs extends SpecificationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specifications findMany
   */
  export type SpecificationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
    /**
     * Filter, which Specifications to fetch.
     * 
    **/
    where?: SpecificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specifications to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specifications.
     * 
    **/
    cursor?: SpecificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SpecificationsScalarFieldEnum>
  }


  /**
   * Specifications create
   */
  export type SpecificationsCreateArgs = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
    /**
     * The data needed to create a Specifications.
     * 
    **/
    data: XOR<SpecificationsCreateInput, SpecificationsUncheckedCreateInput>
  }


  /**
   * Specifications createMany
   */
  export type SpecificationsCreateManyArgs = {
    /**
     * The data used to create many Specifications.
     * 
    **/
    data: Enumerable<SpecificationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Specifications update
   */
  export type SpecificationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
    /**
     * The data needed to update a Specifications.
     * 
    **/
    data: XOR<SpecificationsUpdateInput, SpecificationsUncheckedUpdateInput>
    /**
     * Choose, which Specifications to update.
     * 
    **/
    where: SpecificationsWhereUniqueInput
  }


  /**
   * Specifications updateMany
   */
  export type SpecificationsUpdateManyArgs = {
    /**
     * The data used to update Specifications.
     * 
    **/
    data: XOR<SpecificationsUpdateManyMutationInput, SpecificationsUncheckedUpdateManyInput>
    /**
     * Filter which Specifications to update
     * 
    **/
    where?: SpecificationsWhereInput
  }


  /**
   * Specifications upsert
   */
  export type SpecificationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
    /**
     * The filter to search for the Specifications to update in case it exists.
     * 
    **/
    where: SpecificationsWhereUniqueInput
    /**
     * In case the Specifications found by the `where` argument doesn't exist, create a new Specifications with this data.
     * 
    **/
    create: XOR<SpecificationsCreateInput, SpecificationsUncheckedCreateInput>
    /**
     * In case the Specifications was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SpecificationsUpdateInput, SpecificationsUncheckedUpdateInput>
  }


  /**
   * Specifications delete
   */
  export type SpecificationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
    /**
     * Filter which Specifications to delete.
     * 
    **/
    where: SpecificationsWhereUniqueInput
  }


  /**
   * Specifications deleteMany
   */
  export type SpecificationsDeleteManyArgs = {
    /**
     * Filter which Specifications to delete
     * 
    **/
    where?: SpecificationsWhereInput
  }


  /**
   * Specifications: findUniqueOrThrow
   */
  export type SpecificationsFindUniqueOrThrowArgs = SpecificationsFindUniqueArgsBase
      

  /**
   * Specifications: findFirstOrThrow
   */
  export type SpecificationsFindFirstOrThrowArgs = SpecificationsFindFirstArgsBase
      

  /**
   * Specifications without action
   */
  export type SpecificationsArgs = {
    /**
     * Select specific fields to fetch from the Specifications
     * 
    **/
    select?: SpecificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecificationsInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    password: string | null
    email: string | null
    driver_license: string | null
    isAdmin: boolean | null
    created_at: Date | null
    avatar: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    password: string | null
    email: string | null
    driver_license: string | null
    isAdmin: boolean | null
    created_at: Date | null
    avatar: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    username: number
    password: number
    email: number
    driver_license: number
    isAdmin: number
    created_at: number
    avatar: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    email?: true
    driver_license?: true
    isAdmin?: true
    created_at?: true
    avatar?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    email?: true
    driver_license?: true
    isAdmin?: true
    created_at?: true
    avatar?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    email?: true
    driver_license?: true
    isAdmin?: true
    created_at?: true
    avatar?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin: boolean
    created_at: Date
    avatar: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    driver_license?: boolean
    isAdmin?: boolean
    created_at?: boolean
    avatar?: boolean
    Rentals?: boolean | RentalsFindManyArgs
    UserRentalCar?: boolean | UserRentalCarFindManyArgs
    RefreshToken?: boolean | RefreshTokenFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Rentals?: boolean | RentalsFindManyArgs
    UserRentalCar?: boolean | UserRentalCarFindManyArgs
    RefreshToken?: boolean | RefreshTokenFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Rentals' ? Array < RentalsGetPayload<S['include'][P]>>  :
        P extends 'UserRentalCar' ? Array < UserRentalCarGetPayload<S['include'][P]>>  :
        P extends 'RefreshToken' ? Array < RefreshTokenGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Rentals' ? Array < RentalsGetPayload<S['select'][P]>>  :
        P extends 'UserRentalCar' ? Array < UserRentalCarGetPayload<S['select'][P]>>  :
        P extends 'RefreshToken' ? Array < RefreshTokenGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Rentals<T extends RentalsFindManyArgs = {}>(args?: Subset<T, RentalsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Rentals>>, PrismaPromise<Array<RentalsGetPayload<T>>>>;

    UserRentalCar<T extends UserRentalCarFindManyArgs = {}>(args?: Subset<T, UserRentalCarFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserRentalCar>>, PrismaPromise<Array<UserRentalCarGetPayload<T>>>>;

    RefreshToken<T extends RefreshTokenFindManyArgs = {}>(args?: Subset<T, RefreshTokenFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RefreshToken>>, PrismaPromise<Array<RefreshTokenGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Car
   */


  export type AggregateCar = {
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  export type CarAvgAggregateOutputType = {
    daily_rate: number | null
    fine_amount: number | null
  }

  export type CarSumAggregateOutputType = {
    daily_rate: number | null
    fine_amount: number | null
  }

  export type CarMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    daily_rate: number | null
    available: boolean | null
    license_plate: string | null
    fine_amount: number | null
    brand: string | null
    created_at: Date | null
    category_id: string | null
  }

  export type CarMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    daily_rate: number | null
    available: boolean | null
    license_plate: string | null
    fine_amount: number | null
    brand: string | null
    created_at: Date | null
    category_id: string | null
  }

  export type CarCountAggregateOutputType = {
    id: number
    name: number
    description: number
    daily_rate: number
    available: number
    license_plate: number
    fine_amount: number
    brand: number
    created_at: number
    category_id: number
    _all: number
  }


  export type CarAvgAggregateInputType = {
    daily_rate?: true
    fine_amount?: true
  }

  export type CarSumAggregateInputType = {
    daily_rate?: true
    fine_amount?: true
  }

  export type CarMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    daily_rate?: true
    available?: true
    license_plate?: true
    fine_amount?: true
    brand?: true
    created_at?: true
    category_id?: true
  }

  export type CarMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    daily_rate?: true
    available?: true
    license_plate?: true
    fine_amount?: true
    brand?: true
    created_at?: true
    category_id?: true
  }

  export type CarCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    daily_rate?: true
    available?: true
    license_plate?: true
    fine_amount?: true
    brand?: true
    created_at?: true
    category_id?: true
    _all?: true
  }

  export type CarAggregateArgs = {
    /**
     * Filter which Car to aggregate.
     * 
    **/
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     * 
    **/
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cars
    **/
    _count?: true | CarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarMaxAggregateInputType
  }

  export type GetCarAggregateType<T extends CarAggregateArgs> = {
        [P in keyof T & keyof AggregateCar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCar[P]>
      : GetScalarType<T[P], AggregateCar[P]>
  }




  export type CarGroupByArgs = {
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithAggregationInput>
    by: Array<CarScalarFieldEnum>
    having?: CarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarCountAggregateInputType | true
    _avg?: CarAvgAggregateInputType
    _sum?: CarSumAggregateInputType
    _min?: CarMinAggregateInputType
    _max?: CarMaxAggregateInputType
  }


  export type CarGroupByOutputType = {
    id: string
    name: string
    description: string
    daily_rate: number
    available: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at: Date
    category_id: string
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  type GetCarGroupByPayload<T extends CarGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarGroupByOutputType[P]>
            : GetScalarType<T[P], CarGroupByOutputType[P]>
        }
      >
    >


  export type CarSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    daily_rate?: boolean
    available?: boolean
    license_plate?: boolean
    fine_amount?: boolean
    brand?: boolean
    created_at?: boolean
    fk_category_id?: boolean | CategoryArgs
    category_id?: boolean
    CarSpecification?: boolean | CarSpecificationFindManyArgs
    Specifications?: boolean | SpecificationsFindManyArgs
    CarImages?: boolean | CarImagesFindManyArgs
    Rentals?: boolean | RentalsFindManyArgs
    UserRentalCar?: boolean | UserRentalCarFindManyArgs
    _count?: boolean | CarCountOutputTypeArgs
  }

  export type CarInclude = {
    fk_category_id?: boolean | CategoryArgs
    CarSpecification?: boolean | CarSpecificationFindManyArgs
    Specifications?: boolean | SpecificationsFindManyArgs
    CarImages?: boolean | CarImagesFindManyArgs
    Rentals?: boolean | RentalsFindManyArgs
    UserRentalCar?: boolean | UserRentalCarFindManyArgs
    _count?: boolean | CarCountOutputTypeArgs
  }

  export type CarGetPayload<
    S extends boolean | null | undefined | CarArgs,
    U = keyof S
      > = S extends true
        ? Car
    : S extends undefined
    ? never
    : S extends CarArgs | CarFindManyArgs
    ?'include' extends U
    ? Car  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fk_category_id' ? CategoryGetPayload<S['include'][P]> :
        P extends 'CarSpecification' ? Array < CarSpecificationGetPayload<S['include'][P]>>  :
        P extends 'Specifications' ? Array < SpecificationsGetPayload<S['include'][P]>>  :
        P extends 'CarImages' ? Array < CarImagesGetPayload<S['include'][P]>>  :
        P extends 'Rentals' ? Array < RentalsGetPayload<S['include'][P]>>  :
        P extends 'UserRentalCar' ? Array < UserRentalCarGetPayload<S['include'][P]>>  :
        P extends '_count' ? CarCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fk_category_id' ? CategoryGetPayload<S['select'][P]> :
        P extends 'CarSpecification' ? Array < CarSpecificationGetPayload<S['select'][P]>>  :
        P extends 'Specifications' ? Array < SpecificationsGetPayload<S['select'][P]>>  :
        P extends 'CarImages' ? Array < CarImagesGetPayload<S['select'][P]>>  :
        P extends 'Rentals' ? Array < RentalsGetPayload<S['select'][P]>>  :
        P extends 'UserRentalCar' ? Array < UserRentalCarGetPayload<S['select'][P]>>  :
        P extends '_count' ? CarCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Car ? Car[P] : never
  } 
    : Car
  : Car


  type CarCountArgs = Merge<
    Omit<CarFindManyArgs, 'select' | 'include'> & {
      select?: CarCountAggregateInputType | true
    }
  >

  export interface CarDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Car that matches the filter.
     * @param {CarFindUniqueArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Car'> extends True ? CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>> : CheckSelect<T, Prisma__CarClient<Car | null >, Prisma__CarClient<CarGetPayload<T> | null >>

    /**
     * Find the first Car that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Car'> extends True ? CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>> : CheckSelect<T, Prisma__CarClient<Car | null >, Prisma__CarClient<CarGetPayload<T> | null >>

    /**
     * Find zero or more Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cars
     * const cars = await prisma.car.findMany()
     * 
     * // Get first 10 Cars
     * const cars = await prisma.car.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carWithIdOnly = await prisma.car.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarFindManyArgs>(
      args?: SelectSubset<T, CarFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Car>>, PrismaPromise<Array<CarGetPayload<T>>>>

    /**
     * Create a Car.
     * @param {CarCreateArgs} args - Arguments to create a Car.
     * @example
     * // Create one Car
     * const Car = await prisma.car.create({
     *   data: {
     *     // ... data to create a Car
     *   }
     * })
     * 
    **/
    create<T extends CarCreateArgs>(
      args: SelectSubset<T, CarCreateArgs>
    ): CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>>

    /**
     * Create many Cars.
     *     @param {CarCreateManyArgs} args - Arguments to create many Cars.
     *     @example
     *     // Create many Cars
     *     const car = await prisma.car.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarCreateManyArgs>(
      args?: SelectSubset<T, CarCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Car.
     * @param {CarDeleteArgs} args - Arguments to delete one Car.
     * @example
     * // Delete one Car
     * const Car = await prisma.car.delete({
     *   where: {
     *     // ... filter to delete one Car
     *   }
     * })
     * 
    **/
    delete<T extends CarDeleteArgs>(
      args: SelectSubset<T, CarDeleteArgs>
    ): CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>>

    /**
     * Update one Car.
     * @param {CarUpdateArgs} args - Arguments to update one Car.
     * @example
     * // Update one Car
     * const car = await prisma.car.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarUpdateArgs>(
      args: SelectSubset<T, CarUpdateArgs>
    ): CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>>

    /**
     * Delete zero or more Cars.
     * @param {CarDeleteManyArgs} args - Arguments to filter Cars to delete.
     * @example
     * // Delete a few Cars
     * const { count } = await prisma.car.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarDeleteManyArgs>(
      args?: SelectSubset<T, CarDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cars
     * const car = await prisma.car.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarUpdateManyArgs>(
      args: SelectSubset<T, CarUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Car.
     * @param {CarUpsertArgs} args - Arguments to update or create a Car.
     * @example
     * // Update or create a Car
     * const car = await prisma.car.upsert({
     *   create: {
     *     // ... data to create a Car
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Car we want to update
     *   }
     * })
    **/
    upsert<T extends CarUpsertArgs>(
      args: SelectSubset<T, CarUpsertArgs>
    ): CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>>

    /**
     * Find one Car that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CarFindUniqueOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CarFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>>

    /**
     * Find the first Car that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CarFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CarClient<Car>, Prisma__CarClient<CarGetPayload<T>>>

    /**
     * Count the number of Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCountArgs} args - Arguments to filter Cars to count.
     * @example
     * // Count the number of Cars
     * const count = await prisma.car.count({
     *   where: {
     *     // ... the filter for the Cars we want to count
     *   }
     * })
    **/
    count<T extends CarCountArgs>(
      args?: Subset<T, CarCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarAggregateArgs>(args: Subset<T, CarAggregateArgs>): PrismaPromise<GetCarAggregateType<T>>

    /**
     * Group by Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarGroupByArgs['orderBy'] }
        : { orderBy?: CarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Car.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fk_category_id<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    CarSpecification<T extends CarSpecificationFindManyArgs = {}>(args?: Subset<T, CarSpecificationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CarSpecification>>, PrismaPromise<Array<CarSpecificationGetPayload<T>>>>;

    Specifications<T extends SpecificationsFindManyArgs = {}>(args?: Subset<T, SpecificationsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Specifications>>, PrismaPromise<Array<SpecificationsGetPayload<T>>>>;

    CarImages<T extends CarImagesFindManyArgs = {}>(args?: Subset<T, CarImagesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CarImages>>, PrismaPromise<Array<CarImagesGetPayload<T>>>>;

    Rentals<T extends RentalsFindManyArgs = {}>(args?: Subset<T, RentalsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Rentals>>, PrismaPromise<Array<RentalsGetPayload<T>>>>;

    UserRentalCar<T extends UserRentalCarFindManyArgs = {}>(args?: Subset<T, UserRentalCarFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserRentalCar>>, PrismaPromise<Array<UserRentalCarGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Car base type for findUnique actions
   */
  export type CarFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
    /**
     * Filter, which Car to fetch.
     * 
    **/
    where: CarWhereUniqueInput
  }

  /**
   * Car: findUnique
   */
  export interface CarFindUniqueArgs extends CarFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Car base type for findFirst actions
   */
  export type CarFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
    /**
     * Filter, which Car to fetch.
     * 
    **/
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     * 
    **/
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     * 
    **/
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     * 
    **/
    distinct?: Enumerable<CarScalarFieldEnum>
  }

  /**
   * Car: findFirst
   */
  export interface CarFindFirstArgs extends CarFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Car findMany
   */
  export type CarFindManyArgs = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
    /**
     * Filter, which Cars to fetch.
     * 
    **/
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     * 
    **/
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cars.
     * 
    **/
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Car create
   */
  export type CarCreateArgs = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
    /**
     * The data needed to create a Car.
     * 
    **/
    data: XOR<CarCreateInput, CarUncheckedCreateInput>
  }


  /**
   * Car createMany
   */
  export type CarCreateManyArgs = {
    /**
     * The data used to create many Cars.
     * 
    **/
    data: Enumerable<CarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Car update
   */
  export type CarUpdateArgs = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
    /**
     * The data needed to update a Car.
     * 
    **/
    data: XOR<CarUpdateInput, CarUncheckedUpdateInput>
    /**
     * Choose, which Car to update.
     * 
    **/
    where: CarWhereUniqueInput
  }


  /**
   * Car updateMany
   */
  export type CarUpdateManyArgs = {
    /**
     * The data used to update Cars.
     * 
    **/
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyInput>
    /**
     * Filter which Cars to update
     * 
    **/
    where?: CarWhereInput
  }


  /**
   * Car upsert
   */
  export type CarUpsertArgs = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
    /**
     * The filter to search for the Car to update in case it exists.
     * 
    **/
    where: CarWhereUniqueInput
    /**
     * In case the Car found by the `where` argument doesn't exist, create a new Car with this data.
     * 
    **/
    create: XOR<CarCreateInput, CarUncheckedCreateInput>
    /**
     * In case the Car was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CarUpdateInput, CarUncheckedUpdateInput>
  }


  /**
   * Car delete
   */
  export type CarDeleteArgs = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
    /**
     * Filter which Car to delete.
     * 
    **/
    where: CarWhereUniqueInput
  }


  /**
   * Car deleteMany
   */
  export type CarDeleteManyArgs = {
    /**
     * Filter which Cars to delete
     * 
    **/
    where?: CarWhereInput
  }


  /**
   * Car: findUniqueOrThrow
   */
  export type CarFindUniqueOrThrowArgs = CarFindUniqueArgsBase
      

  /**
   * Car: findFirstOrThrow
   */
  export type CarFindFirstOrThrowArgs = CarFindFirstArgsBase
      

  /**
   * Car without action
   */
  export type CarArgs = {
    /**
     * Select specific fields to fetch from the Car
     * 
    **/
    select?: CarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarInclude | null
  }



  /**
   * Model CarImages
   */


  export type AggregateCarImages = {
    _count: CarImagesCountAggregateOutputType | null
    _min: CarImagesMinAggregateOutputType | null
    _max: CarImagesMaxAggregateOutputType | null
  }

  export type CarImagesMinAggregateOutputType = {
    id: string | null
    image_name: string | null
    car_id: string | null
    created_at: Date | null
  }

  export type CarImagesMaxAggregateOutputType = {
    id: string | null
    image_name: string | null
    car_id: string | null
    created_at: Date | null
  }

  export type CarImagesCountAggregateOutputType = {
    id: number
    image_name: number
    car_id: number
    created_at: number
    _all: number
  }


  export type CarImagesMinAggregateInputType = {
    id?: true
    image_name?: true
    car_id?: true
    created_at?: true
  }

  export type CarImagesMaxAggregateInputType = {
    id?: true
    image_name?: true
    car_id?: true
    created_at?: true
  }

  export type CarImagesCountAggregateInputType = {
    id?: true
    image_name?: true
    car_id?: true
    created_at?: true
    _all?: true
  }

  export type CarImagesAggregateArgs = {
    /**
     * Filter which CarImages to aggregate.
     * 
    **/
    where?: CarImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarImages to fetch.
     * 
    **/
    orderBy?: Enumerable<CarImagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CarImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarImages
    **/
    _count?: true | CarImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarImagesMaxAggregateInputType
  }

  export type GetCarImagesAggregateType<T extends CarImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateCarImages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarImages[P]>
      : GetScalarType<T[P], AggregateCarImages[P]>
  }




  export type CarImagesGroupByArgs = {
    where?: CarImagesWhereInput
    orderBy?: Enumerable<CarImagesOrderByWithAggregationInput>
    by: Array<CarImagesScalarFieldEnum>
    having?: CarImagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarImagesCountAggregateInputType | true
    _min?: CarImagesMinAggregateInputType
    _max?: CarImagesMaxAggregateInputType
  }


  export type CarImagesGroupByOutputType = {
    id: string
    image_name: string
    car_id: string
    created_at: Date
    _count: CarImagesCountAggregateOutputType | null
    _min: CarImagesMinAggregateOutputType | null
    _max: CarImagesMaxAggregateOutputType | null
  }

  type GetCarImagesGroupByPayload<T extends CarImagesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CarImagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarImagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarImagesGroupByOutputType[P]>
            : GetScalarType<T[P], CarImagesGroupByOutputType[P]>
        }
      >
    >


  export type CarImagesSelect = {
    id?: boolean
    image_name?: boolean
    car_id?: boolean
    car?: boolean | CarArgs
    created_at?: boolean
  }

  export type CarImagesInclude = {
    car?: boolean | CarArgs
  }

  export type CarImagesGetPayload<
    S extends boolean | null | undefined | CarImagesArgs,
    U = keyof S
      > = S extends true
        ? CarImages
    : S extends undefined
    ? never
    : S extends CarImagesArgs | CarImagesFindManyArgs
    ?'include' extends U
    ? CarImages  & {
    [P in TrueKeys<S['include']>]:
        P extends 'car' ? CarGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'car' ? CarGetPayload<S['select'][P]> :  P extends keyof CarImages ? CarImages[P] : never
  } 
    : CarImages
  : CarImages


  type CarImagesCountArgs = Merge<
    Omit<CarImagesFindManyArgs, 'select' | 'include'> & {
      select?: CarImagesCountAggregateInputType | true
    }
  >

  export interface CarImagesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CarImages that matches the filter.
     * @param {CarImagesFindUniqueArgs} args - Arguments to find a CarImages
     * @example
     * // Get one CarImages
     * const carImages = await prisma.carImages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarImagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarImagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CarImages'> extends True ? CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>> : CheckSelect<T, Prisma__CarImagesClient<CarImages | null >, Prisma__CarImagesClient<CarImagesGetPayload<T> | null >>

    /**
     * Find the first CarImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarImagesFindFirstArgs} args - Arguments to find a CarImages
     * @example
     * // Get one CarImages
     * const carImages = await prisma.carImages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarImagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarImagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CarImages'> extends True ? CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>> : CheckSelect<T, Prisma__CarImagesClient<CarImages | null >, Prisma__CarImagesClient<CarImagesGetPayload<T> | null >>

    /**
     * Find zero or more CarImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarImagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarImages
     * const carImages = await prisma.carImages.findMany()
     * 
     * // Get first 10 CarImages
     * const carImages = await prisma.carImages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carImagesWithIdOnly = await prisma.carImages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarImagesFindManyArgs>(
      args?: SelectSubset<T, CarImagesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CarImages>>, PrismaPromise<Array<CarImagesGetPayload<T>>>>

    /**
     * Create a CarImages.
     * @param {CarImagesCreateArgs} args - Arguments to create a CarImages.
     * @example
     * // Create one CarImages
     * const CarImages = await prisma.carImages.create({
     *   data: {
     *     // ... data to create a CarImages
     *   }
     * })
     * 
    **/
    create<T extends CarImagesCreateArgs>(
      args: SelectSubset<T, CarImagesCreateArgs>
    ): CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>>

    /**
     * Create many CarImages.
     *     @param {CarImagesCreateManyArgs} args - Arguments to create many CarImages.
     *     @example
     *     // Create many CarImages
     *     const carImages = await prisma.carImages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarImagesCreateManyArgs>(
      args?: SelectSubset<T, CarImagesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CarImages.
     * @param {CarImagesDeleteArgs} args - Arguments to delete one CarImages.
     * @example
     * // Delete one CarImages
     * const CarImages = await prisma.carImages.delete({
     *   where: {
     *     // ... filter to delete one CarImages
     *   }
     * })
     * 
    **/
    delete<T extends CarImagesDeleteArgs>(
      args: SelectSubset<T, CarImagesDeleteArgs>
    ): CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>>

    /**
     * Update one CarImages.
     * @param {CarImagesUpdateArgs} args - Arguments to update one CarImages.
     * @example
     * // Update one CarImages
     * const carImages = await prisma.carImages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarImagesUpdateArgs>(
      args: SelectSubset<T, CarImagesUpdateArgs>
    ): CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>>

    /**
     * Delete zero or more CarImages.
     * @param {CarImagesDeleteManyArgs} args - Arguments to filter CarImages to delete.
     * @example
     * // Delete a few CarImages
     * const { count } = await prisma.carImages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarImagesDeleteManyArgs>(
      args?: SelectSubset<T, CarImagesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarImagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarImages
     * const carImages = await prisma.carImages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarImagesUpdateManyArgs>(
      args: SelectSubset<T, CarImagesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CarImages.
     * @param {CarImagesUpsertArgs} args - Arguments to update or create a CarImages.
     * @example
     * // Update or create a CarImages
     * const carImages = await prisma.carImages.upsert({
     *   create: {
     *     // ... data to create a CarImages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarImages we want to update
     *   }
     * })
    **/
    upsert<T extends CarImagesUpsertArgs>(
      args: SelectSubset<T, CarImagesUpsertArgs>
    ): CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>>

    /**
     * Find one CarImages that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CarImagesFindUniqueOrThrowArgs} args - Arguments to find a CarImages
     * @example
     * // Get one CarImages
     * const carImages = await prisma.carImages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarImagesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CarImagesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>>

    /**
     * Find the first CarImages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarImagesFindFirstOrThrowArgs} args - Arguments to find a CarImages
     * @example
     * // Get one CarImages
     * const carImages = await prisma.carImages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarImagesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CarImagesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CarImagesClient<CarImages>, Prisma__CarImagesClient<CarImagesGetPayload<T>>>

    /**
     * Count the number of CarImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarImagesCountArgs} args - Arguments to filter CarImages to count.
     * @example
     * // Count the number of CarImages
     * const count = await prisma.carImages.count({
     *   where: {
     *     // ... the filter for the CarImages we want to count
     *   }
     * })
    **/
    count<T extends CarImagesCountArgs>(
      args?: Subset<T, CarImagesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarImagesAggregateArgs>(args: Subset<T, CarImagesAggregateArgs>): PrismaPromise<GetCarImagesAggregateType<T>>

    /**
     * Group by CarImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarImagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarImagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarImagesGroupByArgs['orderBy'] }
        : { orderBy?: CarImagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarImagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarImagesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CarImages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarImagesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    car<T extends CarArgs = {}>(args?: Subset<T, CarArgs>): CheckSelect<T, Prisma__CarClient<Car | null >, Prisma__CarClient<CarGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CarImages base type for findUnique actions
   */
  export type CarImagesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
    /**
     * Filter, which CarImages to fetch.
     * 
    **/
    where: CarImagesWhereUniqueInput
  }

  /**
   * CarImages: findUnique
   */
  export interface CarImagesFindUniqueArgs extends CarImagesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarImages base type for findFirst actions
   */
  export type CarImagesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
    /**
     * Filter, which CarImages to fetch.
     * 
    **/
    where?: CarImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarImages to fetch.
     * 
    **/
    orderBy?: Enumerable<CarImagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarImages.
     * 
    **/
    cursor?: CarImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarImages.
     * 
    **/
    distinct?: Enumerable<CarImagesScalarFieldEnum>
  }

  /**
   * CarImages: findFirst
   */
  export interface CarImagesFindFirstArgs extends CarImagesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarImages findMany
   */
  export type CarImagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
    /**
     * Filter, which CarImages to fetch.
     * 
    **/
    where?: CarImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarImages to fetch.
     * 
    **/
    orderBy?: Enumerable<CarImagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarImages.
     * 
    **/
    cursor?: CarImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarImages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CarImagesScalarFieldEnum>
  }


  /**
   * CarImages create
   */
  export type CarImagesCreateArgs = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
    /**
     * The data needed to create a CarImages.
     * 
    **/
    data: XOR<CarImagesCreateInput, CarImagesUncheckedCreateInput>
  }


  /**
   * CarImages createMany
   */
  export type CarImagesCreateManyArgs = {
    /**
     * The data used to create many CarImages.
     * 
    **/
    data: Enumerable<CarImagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CarImages update
   */
  export type CarImagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
    /**
     * The data needed to update a CarImages.
     * 
    **/
    data: XOR<CarImagesUpdateInput, CarImagesUncheckedUpdateInput>
    /**
     * Choose, which CarImages to update.
     * 
    **/
    where: CarImagesWhereUniqueInput
  }


  /**
   * CarImages updateMany
   */
  export type CarImagesUpdateManyArgs = {
    /**
     * The data used to update CarImages.
     * 
    **/
    data: XOR<CarImagesUpdateManyMutationInput, CarImagesUncheckedUpdateManyInput>
    /**
     * Filter which CarImages to update
     * 
    **/
    where?: CarImagesWhereInput
  }


  /**
   * CarImages upsert
   */
  export type CarImagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
    /**
     * The filter to search for the CarImages to update in case it exists.
     * 
    **/
    where: CarImagesWhereUniqueInput
    /**
     * In case the CarImages found by the `where` argument doesn't exist, create a new CarImages with this data.
     * 
    **/
    create: XOR<CarImagesCreateInput, CarImagesUncheckedCreateInput>
    /**
     * In case the CarImages was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CarImagesUpdateInput, CarImagesUncheckedUpdateInput>
  }


  /**
   * CarImages delete
   */
  export type CarImagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
    /**
     * Filter which CarImages to delete.
     * 
    **/
    where: CarImagesWhereUniqueInput
  }


  /**
   * CarImages deleteMany
   */
  export type CarImagesDeleteManyArgs = {
    /**
     * Filter which CarImages to delete
     * 
    **/
    where?: CarImagesWhereInput
  }


  /**
   * CarImages: findUniqueOrThrow
   */
  export type CarImagesFindUniqueOrThrowArgs = CarImagesFindUniqueArgsBase
      

  /**
   * CarImages: findFirstOrThrow
   */
  export type CarImagesFindFirstOrThrowArgs = CarImagesFindFirstArgsBase
      

  /**
   * CarImages without action
   */
  export type CarImagesArgs = {
    /**
     * Select specific fields to fetch from the CarImages
     * 
    **/
    select?: CarImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarImagesInclude | null
  }



  /**
   * Model CarSpecification
   */


  export type AggregateCarSpecification = {
    _count: CarSpecificationCountAggregateOutputType | null
    _min: CarSpecificationMinAggregateOutputType | null
    _max: CarSpecificationMaxAggregateOutputType | null
  }

  export type CarSpecificationMinAggregateOutputType = {
    car_id: string | null
    specification_id: string | null
  }

  export type CarSpecificationMaxAggregateOutputType = {
    car_id: string | null
    specification_id: string | null
  }

  export type CarSpecificationCountAggregateOutputType = {
    car_id: number
    specification_id: number
    _all: number
  }


  export type CarSpecificationMinAggregateInputType = {
    car_id?: true
    specification_id?: true
  }

  export type CarSpecificationMaxAggregateInputType = {
    car_id?: true
    specification_id?: true
  }

  export type CarSpecificationCountAggregateInputType = {
    car_id?: true
    specification_id?: true
    _all?: true
  }

  export type CarSpecificationAggregateArgs = {
    /**
     * Filter which CarSpecification to aggregate.
     * 
    **/
    where?: CarSpecificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarSpecifications to fetch.
     * 
    **/
    orderBy?: Enumerable<CarSpecificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CarSpecificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarSpecifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarSpecifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarSpecifications
    **/
    _count?: true | CarSpecificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarSpecificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarSpecificationMaxAggregateInputType
  }

  export type GetCarSpecificationAggregateType<T extends CarSpecificationAggregateArgs> = {
        [P in keyof T & keyof AggregateCarSpecification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarSpecification[P]>
      : GetScalarType<T[P], AggregateCarSpecification[P]>
  }




  export type CarSpecificationGroupByArgs = {
    where?: CarSpecificationWhereInput
    orderBy?: Enumerable<CarSpecificationOrderByWithAggregationInput>
    by: Array<CarSpecificationScalarFieldEnum>
    having?: CarSpecificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarSpecificationCountAggregateInputType | true
    _min?: CarSpecificationMinAggregateInputType
    _max?: CarSpecificationMaxAggregateInputType
  }


  export type CarSpecificationGroupByOutputType = {
    car_id: string
    specification_id: string
    _count: CarSpecificationCountAggregateOutputType | null
    _min: CarSpecificationMinAggregateOutputType | null
    _max: CarSpecificationMaxAggregateOutputType | null
  }

  type GetCarSpecificationGroupByPayload<T extends CarSpecificationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CarSpecificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarSpecificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarSpecificationGroupByOutputType[P]>
            : GetScalarType<T[P], CarSpecificationGroupByOutputType[P]>
        }
      >
    >


  export type CarSpecificationSelect = {
    car_id?: boolean
    car?: boolean | CarArgs
    specification_id?: boolean
    specification?: boolean | SpecificationsArgs
  }

  export type CarSpecificationInclude = {
    car?: boolean | CarArgs
    specification?: boolean | SpecificationsArgs
  }

  export type CarSpecificationGetPayload<
    S extends boolean | null | undefined | CarSpecificationArgs,
    U = keyof S
      > = S extends true
        ? CarSpecification
    : S extends undefined
    ? never
    : S extends CarSpecificationArgs | CarSpecificationFindManyArgs
    ?'include' extends U
    ? CarSpecification  & {
    [P in TrueKeys<S['include']>]:
        P extends 'car' ? CarGetPayload<S['include'][P]> :
        P extends 'specification' ? SpecificationsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'car' ? CarGetPayload<S['select'][P]> :
        P extends 'specification' ? SpecificationsGetPayload<S['select'][P]> :  P extends keyof CarSpecification ? CarSpecification[P] : never
  } 
    : CarSpecification
  : CarSpecification


  type CarSpecificationCountArgs = Merge<
    Omit<CarSpecificationFindManyArgs, 'select' | 'include'> & {
      select?: CarSpecificationCountAggregateInputType | true
    }
  >

  export interface CarSpecificationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CarSpecification that matches the filter.
     * @param {CarSpecificationFindUniqueArgs} args - Arguments to find a CarSpecification
     * @example
     * // Get one CarSpecification
     * const carSpecification = await prisma.carSpecification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarSpecificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarSpecificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CarSpecification'> extends True ? CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>> : CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification | null >, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T> | null >>

    /**
     * Find the first CarSpecification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarSpecificationFindFirstArgs} args - Arguments to find a CarSpecification
     * @example
     * // Get one CarSpecification
     * const carSpecification = await prisma.carSpecification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarSpecificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarSpecificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CarSpecification'> extends True ? CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>> : CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification | null >, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T> | null >>

    /**
     * Find zero or more CarSpecifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarSpecificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarSpecifications
     * const carSpecifications = await prisma.carSpecification.findMany()
     * 
     * // Get first 10 CarSpecifications
     * const carSpecifications = await prisma.carSpecification.findMany({ take: 10 })
     * 
     * // Only select the `car_id`
     * const carSpecificationWithCar_idOnly = await prisma.carSpecification.findMany({ select: { car_id: true } })
     * 
    **/
    findMany<T extends CarSpecificationFindManyArgs>(
      args?: SelectSubset<T, CarSpecificationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CarSpecification>>, PrismaPromise<Array<CarSpecificationGetPayload<T>>>>

    /**
     * Create a CarSpecification.
     * @param {CarSpecificationCreateArgs} args - Arguments to create a CarSpecification.
     * @example
     * // Create one CarSpecification
     * const CarSpecification = await prisma.carSpecification.create({
     *   data: {
     *     // ... data to create a CarSpecification
     *   }
     * })
     * 
    **/
    create<T extends CarSpecificationCreateArgs>(
      args: SelectSubset<T, CarSpecificationCreateArgs>
    ): CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>>

    /**
     * Create many CarSpecifications.
     *     @param {CarSpecificationCreateManyArgs} args - Arguments to create many CarSpecifications.
     *     @example
     *     // Create many CarSpecifications
     *     const carSpecification = await prisma.carSpecification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarSpecificationCreateManyArgs>(
      args?: SelectSubset<T, CarSpecificationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CarSpecification.
     * @param {CarSpecificationDeleteArgs} args - Arguments to delete one CarSpecification.
     * @example
     * // Delete one CarSpecification
     * const CarSpecification = await prisma.carSpecification.delete({
     *   where: {
     *     // ... filter to delete one CarSpecification
     *   }
     * })
     * 
    **/
    delete<T extends CarSpecificationDeleteArgs>(
      args: SelectSubset<T, CarSpecificationDeleteArgs>
    ): CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>>

    /**
     * Update one CarSpecification.
     * @param {CarSpecificationUpdateArgs} args - Arguments to update one CarSpecification.
     * @example
     * // Update one CarSpecification
     * const carSpecification = await prisma.carSpecification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarSpecificationUpdateArgs>(
      args: SelectSubset<T, CarSpecificationUpdateArgs>
    ): CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>>

    /**
     * Delete zero or more CarSpecifications.
     * @param {CarSpecificationDeleteManyArgs} args - Arguments to filter CarSpecifications to delete.
     * @example
     * // Delete a few CarSpecifications
     * const { count } = await prisma.carSpecification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarSpecificationDeleteManyArgs>(
      args?: SelectSubset<T, CarSpecificationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarSpecifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarSpecificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarSpecifications
     * const carSpecification = await prisma.carSpecification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarSpecificationUpdateManyArgs>(
      args: SelectSubset<T, CarSpecificationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CarSpecification.
     * @param {CarSpecificationUpsertArgs} args - Arguments to update or create a CarSpecification.
     * @example
     * // Update or create a CarSpecification
     * const carSpecification = await prisma.carSpecification.upsert({
     *   create: {
     *     // ... data to create a CarSpecification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarSpecification we want to update
     *   }
     * })
    **/
    upsert<T extends CarSpecificationUpsertArgs>(
      args: SelectSubset<T, CarSpecificationUpsertArgs>
    ): CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>>

    /**
     * Find one CarSpecification that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CarSpecificationFindUniqueOrThrowArgs} args - Arguments to find a CarSpecification
     * @example
     * // Get one CarSpecification
     * const carSpecification = await prisma.carSpecification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarSpecificationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CarSpecificationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>>

    /**
     * Find the first CarSpecification that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarSpecificationFindFirstOrThrowArgs} args - Arguments to find a CarSpecification
     * @example
     * // Get one CarSpecification
     * const carSpecification = await prisma.carSpecification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarSpecificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CarSpecificationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CarSpecificationClient<CarSpecification>, Prisma__CarSpecificationClient<CarSpecificationGetPayload<T>>>

    /**
     * Count the number of CarSpecifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarSpecificationCountArgs} args - Arguments to filter CarSpecifications to count.
     * @example
     * // Count the number of CarSpecifications
     * const count = await prisma.carSpecification.count({
     *   where: {
     *     // ... the filter for the CarSpecifications we want to count
     *   }
     * })
    **/
    count<T extends CarSpecificationCountArgs>(
      args?: Subset<T, CarSpecificationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarSpecificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarSpecification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarSpecificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarSpecificationAggregateArgs>(args: Subset<T, CarSpecificationAggregateArgs>): PrismaPromise<GetCarSpecificationAggregateType<T>>

    /**
     * Group by CarSpecification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarSpecificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarSpecificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarSpecificationGroupByArgs['orderBy'] }
        : { orderBy?: CarSpecificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarSpecificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarSpecificationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CarSpecification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarSpecificationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    car<T extends CarArgs = {}>(args?: Subset<T, CarArgs>): CheckSelect<T, Prisma__CarClient<Car | null >, Prisma__CarClient<CarGetPayload<T> | null >>;

    specification<T extends SpecificationsArgs = {}>(args?: Subset<T, SpecificationsArgs>): CheckSelect<T, Prisma__SpecificationsClient<Specifications | null >, Prisma__SpecificationsClient<SpecificationsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CarSpecification base type for findUnique actions
   */
  export type CarSpecificationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
    /**
     * Filter, which CarSpecification to fetch.
     * 
    **/
    where: CarSpecificationWhereUniqueInput
  }

  /**
   * CarSpecification: findUnique
   */
  export interface CarSpecificationFindUniqueArgs extends CarSpecificationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarSpecification base type for findFirst actions
   */
  export type CarSpecificationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
    /**
     * Filter, which CarSpecification to fetch.
     * 
    **/
    where?: CarSpecificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarSpecifications to fetch.
     * 
    **/
    orderBy?: Enumerable<CarSpecificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarSpecifications.
     * 
    **/
    cursor?: CarSpecificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarSpecifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarSpecifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarSpecifications.
     * 
    **/
    distinct?: Enumerable<CarSpecificationScalarFieldEnum>
  }

  /**
   * CarSpecification: findFirst
   */
  export interface CarSpecificationFindFirstArgs extends CarSpecificationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarSpecification findMany
   */
  export type CarSpecificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
    /**
     * Filter, which CarSpecifications to fetch.
     * 
    **/
    where?: CarSpecificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarSpecifications to fetch.
     * 
    **/
    orderBy?: Enumerable<CarSpecificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarSpecifications.
     * 
    **/
    cursor?: CarSpecificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarSpecifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarSpecifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CarSpecificationScalarFieldEnum>
  }


  /**
   * CarSpecification create
   */
  export type CarSpecificationCreateArgs = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
    /**
     * The data needed to create a CarSpecification.
     * 
    **/
    data: XOR<CarSpecificationCreateInput, CarSpecificationUncheckedCreateInput>
  }


  /**
   * CarSpecification createMany
   */
  export type CarSpecificationCreateManyArgs = {
    /**
     * The data used to create many CarSpecifications.
     * 
    **/
    data: Enumerable<CarSpecificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CarSpecification update
   */
  export type CarSpecificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
    /**
     * The data needed to update a CarSpecification.
     * 
    **/
    data: XOR<CarSpecificationUpdateInput, CarSpecificationUncheckedUpdateInput>
    /**
     * Choose, which CarSpecification to update.
     * 
    **/
    where: CarSpecificationWhereUniqueInput
  }


  /**
   * CarSpecification updateMany
   */
  export type CarSpecificationUpdateManyArgs = {
    /**
     * The data used to update CarSpecifications.
     * 
    **/
    data: XOR<CarSpecificationUpdateManyMutationInput, CarSpecificationUncheckedUpdateManyInput>
    /**
     * Filter which CarSpecifications to update
     * 
    **/
    where?: CarSpecificationWhereInput
  }


  /**
   * CarSpecification upsert
   */
  export type CarSpecificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
    /**
     * The filter to search for the CarSpecification to update in case it exists.
     * 
    **/
    where: CarSpecificationWhereUniqueInput
    /**
     * In case the CarSpecification found by the `where` argument doesn't exist, create a new CarSpecification with this data.
     * 
    **/
    create: XOR<CarSpecificationCreateInput, CarSpecificationUncheckedCreateInput>
    /**
     * In case the CarSpecification was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CarSpecificationUpdateInput, CarSpecificationUncheckedUpdateInput>
  }


  /**
   * CarSpecification delete
   */
  export type CarSpecificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
    /**
     * Filter which CarSpecification to delete.
     * 
    **/
    where: CarSpecificationWhereUniqueInput
  }


  /**
   * CarSpecification deleteMany
   */
  export type CarSpecificationDeleteManyArgs = {
    /**
     * Filter which CarSpecifications to delete
     * 
    **/
    where?: CarSpecificationWhereInput
  }


  /**
   * CarSpecification: findUniqueOrThrow
   */
  export type CarSpecificationFindUniqueOrThrowArgs = CarSpecificationFindUniqueArgsBase
      

  /**
   * CarSpecification: findFirstOrThrow
   */
  export type CarSpecificationFindFirstOrThrowArgs = CarSpecificationFindFirstArgsBase
      

  /**
   * CarSpecification without action
   */
  export type CarSpecificationArgs = {
    /**
     * Select specific fields to fetch from the CarSpecification
     * 
    **/
    select?: CarSpecificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarSpecificationInclude | null
  }



  /**
   * Model Rentals
   */


  export type AggregateRentals = {
    _count: RentalsCountAggregateOutputType | null
    _avg: RentalsAvgAggregateOutputType | null
    _sum: RentalsSumAggregateOutputType | null
    _min: RentalsMinAggregateOutputType | null
    _max: RentalsMaxAggregateOutputType | null
  }

  export type RentalsAvgAggregateOutputType = {
    total: number | null
  }

  export type RentalsSumAggregateOutputType = {
    total: number | null
  }

  export type RentalsMinAggregateOutputType = {
    id: string | null
    start_date: Date | null
    end_date: Date | null
    expect_return_date: Date | null
    total: number | null
    created_at: Date | null
    updated_at: Date | null
    user_id: string | null
    car_id: string | null
  }

  export type RentalsMaxAggregateOutputType = {
    id: string | null
    start_date: Date | null
    end_date: Date | null
    expect_return_date: Date | null
    total: number | null
    created_at: Date | null
    updated_at: Date | null
    user_id: string | null
    car_id: string | null
  }

  export type RentalsCountAggregateOutputType = {
    id: number
    start_date: number
    end_date: number
    expect_return_date: number
    total: number
    created_at: number
    updated_at: number
    user_id: number
    car_id: number
    _all: number
  }


  export type RentalsAvgAggregateInputType = {
    total?: true
  }

  export type RentalsSumAggregateInputType = {
    total?: true
  }

  export type RentalsMinAggregateInputType = {
    id?: true
    start_date?: true
    end_date?: true
    expect_return_date?: true
    total?: true
    created_at?: true
    updated_at?: true
    user_id?: true
    car_id?: true
  }

  export type RentalsMaxAggregateInputType = {
    id?: true
    start_date?: true
    end_date?: true
    expect_return_date?: true
    total?: true
    created_at?: true
    updated_at?: true
    user_id?: true
    car_id?: true
  }

  export type RentalsCountAggregateInputType = {
    id?: true
    start_date?: true
    end_date?: true
    expect_return_date?: true
    total?: true
    created_at?: true
    updated_at?: true
    user_id?: true
    car_id?: true
    _all?: true
  }

  export type RentalsAggregateArgs = {
    /**
     * Filter which Rentals to aggregate.
     * 
    **/
    where?: RentalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     * 
    **/
    orderBy?: Enumerable<RentalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RentalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rentals
    **/
    _count?: true | RentalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentalsMaxAggregateInputType
  }

  export type GetRentalsAggregateType<T extends RentalsAggregateArgs> = {
        [P in keyof T & keyof AggregateRentals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRentals[P]>
      : GetScalarType<T[P], AggregateRentals[P]>
  }




  export type RentalsGroupByArgs = {
    where?: RentalsWhereInput
    orderBy?: Enumerable<RentalsOrderByWithAggregationInput>
    by: Array<RentalsScalarFieldEnum>
    having?: RentalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentalsCountAggregateInputType | true
    _avg?: RentalsAvgAggregateInputType
    _sum?: RentalsSumAggregateInputType
    _min?: RentalsMinAggregateInputType
    _max?: RentalsMaxAggregateInputType
  }


  export type RentalsGroupByOutputType = {
    id: string
    start_date: Date
    end_date: Date | null
    expect_return_date: Date
    total: number | null
    created_at: Date
    updated_at: Date | null
    user_id: string
    car_id: string
    _count: RentalsCountAggregateOutputType | null
    _avg: RentalsAvgAggregateOutputType | null
    _sum: RentalsSumAggregateOutputType | null
    _min: RentalsMinAggregateOutputType | null
    _max: RentalsMaxAggregateOutputType | null
  }

  type GetRentalsGroupByPayload<T extends RentalsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RentalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentalsGroupByOutputType[P]>
            : GetScalarType<T[P], RentalsGroupByOutputType[P]>
        }
      >
    >


  export type RentalsSelect = {
    id?: boolean
    start_date?: boolean
    end_date?: boolean
    expect_return_date?: boolean
    total?: boolean
    created_at?: boolean
    updated_at?: boolean
    User?: boolean | UserArgs
    user_id?: boolean
    Car?: boolean | CarArgs
    car_id?: boolean
  }

  export type RentalsInclude = {
    User?: boolean | UserArgs
    Car?: boolean | CarArgs
  }

  export type RentalsGetPayload<
    S extends boolean | null | undefined | RentalsArgs,
    U = keyof S
      > = S extends true
        ? Rentals
    : S extends undefined
    ? never
    : S extends RentalsArgs | RentalsFindManyArgs
    ?'include' extends U
    ? Rentals  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Car' ? CarGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Car' ? CarGetPayload<S['select'][P]> :  P extends keyof Rentals ? Rentals[P] : never
  } 
    : Rentals
  : Rentals


  type RentalsCountArgs = Merge<
    Omit<RentalsFindManyArgs, 'select' | 'include'> & {
      select?: RentalsCountAggregateInputType | true
    }
  >

  export interface RentalsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Rentals that matches the filter.
     * @param {RentalsFindUniqueArgs} args - Arguments to find a Rentals
     * @example
     * // Get one Rentals
     * const rentals = await prisma.rentals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RentalsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RentalsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Rentals'> extends True ? CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>> : CheckSelect<T, Prisma__RentalsClient<Rentals | null >, Prisma__RentalsClient<RentalsGetPayload<T> | null >>

    /**
     * Find the first Rentals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalsFindFirstArgs} args - Arguments to find a Rentals
     * @example
     * // Get one Rentals
     * const rentals = await prisma.rentals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RentalsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RentalsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Rentals'> extends True ? CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>> : CheckSelect<T, Prisma__RentalsClient<Rentals | null >, Prisma__RentalsClient<RentalsGetPayload<T> | null >>

    /**
     * Find zero or more Rentals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rentals
     * const rentals = await prisma.rentals.findMany()
     * 
     * // Get first 10 Rentals
     * const rentals = await prisma.rentals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rentalsWithIdOnly = await prisma.rentals.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RentalsFindManyArgs>(
      args?: SelectSubset<T, RentalsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Rentals>>, PrismaPromise<Array<RentalsGetPayload<T>>>>

    /**
     * Create a Rentals.
     * @param {RentalsCreateArgs} args - Arguments to create a Rentals.
     * @example
     * // Create one Rentals
     * const Rentals = await prisma.rentals.create({
     *   data: {
     *     // ... data to create a Rentals
     *   }
     * })
     * 
    **/
    create<T extends RentalsCreateArgs>(
      args: SelectSubset<T, RentalsCreateArgs>
    ): CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>>

    /**
     * Create many Rentals.
     *     @param {RentalsCreateManyArgs} args - Arguments to create many Rentals.
     *     @example
     *     // Create many Rentals
     *     const rentals = await prisma.rentals.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RentalsCreateManyArgs>(
      args?: SelectSubset<T, RentalsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Rentals.
     * @param {RentalsDeleteArgs} args - Arguments to delete one Rentals.
     * @example
     * // Delete one Rentals
     * const Rentals = await prisma.rentals.delete({
     *   where: {
     *     // ... filter to delete one Rentals
     *   }
     * })
     * 
    **/
    delete<T extends RentalsDeleteArgs>(
      args: SelectSubset<T, RentalsDeleteArgs>
    ): CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>>

    /**
     * Update one Rentals.
     * @param {RentalsUpdateArgs} args - Arguments to update one Rentals.
     * @example
     * // Update one Rentals
     * const rentals = await prisma.rentals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RentalsUpdateArgs>(
      args: SelectSubset<T, RentalsUpdateArgs>
    ): CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>>

    /**
     * Delete zero or more Rentals.
     * @param {RentalsDeleteManyArgs} args - Arguments to filter Rentals to delete.
     * @example
     * // Delete a few Rentals
     * const { count } = await prisma.rentals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RentalsDeleteManyArgs>(
      args?: SelectSubset<T, RentalsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rentals
     * const rentals = await prisma.rentals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RentalsUpdateManyArgs>(
      args: SelectSubset<T, RentalsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Rentals.
     * @param {RentalsUpsertArgs} args - Arguments to update or create a Rentals.
     * @example
     * // Update or create a Rentals
     * const rentals = await prisma.rentals.upsert({
     *   create: {
     *     // ... data to create a Rentals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rentals we want to update
     *   }
     * })
    **/
    upsert<T extends RentalsUpsertArgs>(
      args: SelectSubset<T, RentalsUpsertArgs>
    ): CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>>

    /**
     * Find one Rentals that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RentalsFindUniqueOrThrowArgs} args - Arguments to find a Rentals
     * @example
     * // Get one Rentals
     * const rentals = await prisma.rentals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RentalsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RentalsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>>

    /**
     * Find the first Rentals that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalsFindFirstOrThrowArgs} args - Arguments to find a Rentals
     * @example
     * // Get one Rentals
     * const rentals = await prisma.rentals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RentalsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RentalsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RentalsClient<Rentals>, Prisma__RentalsClient<RentalsGetPayload<T>>>

    /**
     * Count the number of Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalsCountArgs} args - Arguments to filter Rentals to count.
     * @example
     * // Count the number of Rentals
     * const count = await prisma.rentals.count({
     *   where: {
     *     // ... the filter for the Rentals we want to count
     *   }
     * })
    **/
    count<T extends RentalsCountArgs>(
      args?: Subset<T, RentalsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentalsAggregateArgs>(args: Subset<T, RentalsAggregateArgs>): PrismaPromise<GetRentalsAggregateType<T>>

    /**
     * Group by Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentalsGroupByArgs['orderBy'] }
        : { orderBy?: RentalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentalsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rentals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RentalsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Car<T extends CarArgs = {}>(args?: Subset<T, CarArgs>): CheckSelect<T, Prisma__CarClient<Car | null >, Prisma__CarClient<CarGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Rentals base type for findUnique actions
   */
  export type RentalsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
    /**
     * Filter, which Rentals to fetch.
     * 
    **/
    where: RentalsWhereUniqueInput
  }

  /**
   * Rentals: findUnique
   */
  export interface RentalsFindUniqueArgs extends RentalsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rentals base type for findFirst actions
   */
  export type RentalsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
    /**
     * Filter, which Rentals to fetch.
     * 
    **/
    where?: RentalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     * 
    **/
    orderBy?: Enumerable<RentalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rentals.
     * 
    **/
    cursor?: RentalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rentals.
     * 
    **/
    distinct?: Enumerable<RentalsScalarFieldEnum>
  }

  /**
   * Rentals: findFirst
   */
  export interface RentalsFindFirstArgs extends RentalsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rentals findMany
   */
  export type RentalsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
    /**
     * Filter, which Rentals to fetch.
     * 
    **/
    where?: RentalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     * 
    **/
    orderBy?: Enumerable<RentalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rentals.
     * 
    **/
    cursor?: RentalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RentalsScalarFieldEnum>
  }


  /**
   * Rentals create
   */
  export type RentalsCreateArgs = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
    /**
     * The data needed to create a Rentals.
     * 
    **/
    data: XOR<RentalsCreateInput, RentalsUncheckedCreateInput>
  }


  /**
   * Rentals createMany
   */
  export type RentalsCreateManyArgs = {
    /**
     * The data used to create many Rentals.
     * 
    **/
    data: Enumerable<RentalsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Rentals update
   */
  export type RentalsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
    /**
     * The data needed to update a Rentals.
     * 
    **/
    data: XOR<RentalsUpdateInput, RentalsUncheckedUpdateInput>
    /**
     * Choose, which Rentals to update.
     * 
    **/
    where: RentalsWhereUniqueInput
  }


  /**
   * Rentals updateMany
   */
  export type RentalsUpdateManyArgs = {
    /**
     * The data used to update Rentals.
     * 
    **/
    data: XOR<RentalsUpdateManyMutationInput, RentalsUncheckedUpdateManyInput>
    /**
     * Filter which Rentals to update
     * 
    **/
    where?: RentalsWhereInput
  }


  /**
   * Rentals upsert
   */
  export type RentalsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
    /**
     * The filter to search for the Rentals to update in case it exists.
     * 
    **/
    where: RentalsWhereUniqueInput
    /**
     * In case the Rentals found by the `where` argument doesn't exist, create a new Rentals with this data.
     * 
    **/
    create: XOR<RentalsCreateInput, RentalsUncheckedCreateInput>
    /**
     * In case the Rentals was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RentalsUpdateInput, RentalsUncheckedUpdateInput>
  }


  /**
   * Rentals delete
   */
  export type RentalsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
    /**
     * Filter which Rentals to delete.
     * 
    **/
    where: RentalsWhereUniqueInput
  }


  /**
   * Rentals deleteMany
   */
  export type RentalsDeleteManyArgs = {
    /**
     * Filter which Rentals to delete
     * 
    **/
    where?: RentalsWhereInput
  }


  /**
   * Rentals: findUniqueOrThrow
   */
  export type RentalsFindUniqueOrThrowArgs = RentalsFindUniqueArgsBase
      

  /**
   * Rentals: findFirstOrThrow
   */
  export type RentalsFindFirstOrThrowArgs = RentalsFindFirstArgsBase
      

  /**
   * Rentals without action
   */
  export type RentalsArgs = {
    /**
     * Select specific fields to fetch from the Rentals
     * 
    **/
    select?: RentalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RentalsInclude | null
  }



  /**
   * Model UserRentalCar
   */


  export type AggregateUserRentalCar = {
    _count: UserRentalCarCountAggregateOutputType | null
    _min: UserRentalCarMinAggregateOutputType | null
    _max: UserRentalCarMaxAggregateOutputType | null
  }

  export type UserRentalCarMinAggregateOutputType = {
    car_id: string | null
    user_id: string | null
  }

  export type UserRentalCarMaxAggregateOutputType = {
    car_id: string | null
    user_id: string | null
  }

  export type UserRentalCarCountAggregateOutputType = {
    car_id: number
    user_id: number
    _all: number
  }


  export type UserRentalCarMinAggregateInputType = {
    car_id?: true
    user_id?: true
  }

  export type UserRentalCarMaxAggregateInputType = {
    car_id?: true
    user_id?: true
  }

  export type UserRentalCarCountAggregateInputType = {
    car_id?: true
    user_id?: true
    _all?: true
  }

  export type UserRentalCarAggregateArgs = {
    /**
     * Filter which UserRentalCar to aggregate.
     * 
    **/
    where?: UserRentalCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRentalCars to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRentalCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserRentalCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRentalCars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRentalCars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRentalCars
    **/
    _count?: true | UserRentalCarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRentalCarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRentalCarMaxAggregateInputType
  }

  export type GetUserRentalCarAggregateType<T extends UserRentalCarAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRentalCar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRentalCar[P]>
      : GetScalarType<T[P], AggregateUserRentalCar[P]>
  }




  export type UserRentalCarGroupByArgs = {
    where?: UserRentalCarWhereInput
    orderBy?: Enumerable<UserRentalCarOrderByWithAggregationInput>
    by: Array<UserRentalCarScalarFieldEnum>
    having?: UserRentalCarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRentalCarCountAggregateInputType | true
    _min?: UserRentalCarMinAggregateInputType
    _max?: UserRentalCarMaxAggregateInputType
  }


  export type UserRentalCarGroupByOutputType = {
    car_id: string
    user_id: string
    _count: UserRentalCarCountAggregateOutputType | null
    _min: UserRentalCarMinAggregateOutputType | null
    _max: UserRentalCarMaxAggregateOutputType | null
  }

  type GetUserRentalCarGroupByPayload<T extends UserRentalCarGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserRentalCarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRentalCarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRentalCarGroupByOutputType[P]>
            : GetScalarType<T[P], UserRentalCarGroupByOutputType[P]>
        }
      >
    >


  export type UserRentalCarSelect = {
    car_id?: boolean
    fk_car_rental?: boolean | CarArgs
    user_id?: boolean
    fk_user_rental?: boolean | UserArgs
  }

  export type UserRentalCarInclude = {
    fk_car_rental?: boolean | CarArgs
    fk_user_rental?: boolean | UserArgs
  }

  export type UserRentalCarGetPayload<
    S extends boolean | null | undefined | UserRentalCarArgs,
    U = keyof S
      > = S extends true
        ? UserRentalCar
    : S extends undefined
    ? never
    : S extends UserRentalCarArgs | UserRentalCarFindManyArgs
    ?'include' extends U
    ? UserRentalCar  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fk_car_rental' ? CarGetPayload<S['include'][P]> :
        P extends 'fk_user_rental' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fk_car_rental' ? CarGetPayload<S['select'][P]> :
        P extends 'fk_user_rental' ? UserGetPayload<S['select'][P]> :  P extends keyof UserRentalCar ? UserRentalCar[P] : never
  } 
    : UserRentalCar
  : UserRentalCar


  type UserRentalCarCountArgs = Merge<
    Omit<UserRentalCarFindManyArgs, 'select' | 'include'> & {
      select?: UserRentalCarCountAggregateInputType | true
    }
  >

  export interface UserRentalCarDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserRentalCar that matches the filter.
     * @param {UserRentalCarFindUniqueArgs} args - Arguments to find a UserRentalCar
     * @example
     * // Get one UserRentalCar
     * const userRentalCar = await prisma.userRentalCar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserRentalCarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserRentalCarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserRentalCar'> extends True ? CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>> : CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar | null >, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T> | null >>

    /**
     * Find the first UserRentalCar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRentalCarFindFirstArgs} args - Arguments to find a UserRentalCar
     * @example
     * // Get one UserRentalCar
     * const userRentalCar = await prisma.userRentalCar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserRentalCarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserRentalCarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserRentalCar'> extends True ? CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>> : CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar | null >, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T> | null >>

    /**
     * Find zero or more UserRentalCars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRentalCarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRentalCars
     * const userRentalCars = await prisma.userRentalCar.findMany()
     * 
     * // Get first 10 UserRentalCars
     * const userRentalCars = await prisma.userRentalCar.findMany({ take: 10 })
     * 
     * // Only select the `car_id`
     * const userRentalCarWithCar_idOnly = await prisma.userRentalCar.findMany({ select: { car_id: true } })
     * 
    **/
    findMany<T extends UserRentalCarFindManyArgs>(
      args?: SelectSubset<T, UserRentalCarFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserRentalCar>>, PrismaPromise<Array<UserRentalCarGetPayload<T>>>>

    /**
     * Create a UserRentalCar.
     * @param {UserRentalCarCreateArgs} args - Arguments to create a UserRentalCar.
     * @example
     * // Create one UserRentalCar
     * const UserRentalCar = await prisma.userRentalCar.create({
     *   data: {
     *     // ... data to create a UserRentalCar
     *   }
     * })
     * 
    **/
    create<T extends UserRentalCarCreateArgs>(
      args: SelectSubset<T, UserRentalCarCreateArgs>
    ): CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>>

    /**
     * Create many UserRentalCars.
     *     @param {UserRentalCarCreateManyArgs} args - Arguments to create many UserRentalCars.
     *     @example
     *     // Create many UserRentalCars
     *     const userRentalCar = await prisma.userRentalCar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserRentalCarCreateManyArgs>(
      args?: SelectSubset<T, UserRentalCarCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserRentalCar.
     * @param {UserRentalCarDeleteArgs} args - Arguments to delete one UserRentalCar.
     * @example
     * // Delete one UserRentalCar
     * const UserRentalCar = await prisma.userRentalCar.delete({
     *   where: {
     *     // ... filter to delete one UserRentalCar
     *   }
     * })
     * 
    **/
    delete<T extends UserRentalCarDeleteArgs>(
      args: SelectSubset<T, UserRentalCarDeleteArgs>
    ): CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>>

    /**
     * Update one UserRentalCar.
     * @param {UserRentalCarUpdateArgs} args - Arguments to update one UserRentalCar.
     * @example
     * // Update one UserRentalCar
     * const userRentalCar = await prisma.userRentalCar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserRentalCarUpdateArgs>(
      args: SelectSubset<T, UserRentalCarUpdateArgs>
    ): CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>>

    /**
     * Delete zero or more UserRentalCars.
     * @param {UserRentalCarDeleteManyArgs} args - Arguments to filter UserRentalCars to delete.
     * @example
     * // Delete a few UserRentalCars
     * const { count } = await prisma.userRentalCar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserRentalCarDeleteManyArgs>(
      args?: SelectSubset<T, UserRentalCarDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRentalCars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRentalCarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRentalCars
     * const userRentalCar = await prisma.userRentalCar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserRentalCarUpdateManyArgs>(
      args: SelectSubset<T, UserRentalCarUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRentalCar.
     * @param {UserRentalCarUpsertArgs} args - Arguments to update or create a UserRentalCar.
     * @example
     * // Update or create a UserRentalCar
     * const userRentalCar = await prisma.userRentalCar.upsert({
     *   create: {
     *     // ... data to create a UserRentalCar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRentalCar we want to update
     *   }
     * })
    **/
    upsert<T extends UserRentalCarUpsertArgs>(
      args: SelectSubset<T, UserRentalCarUpsertArgs>
    ): CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>>

    /**
     * Find one UserRentalCar that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserRentalCarFindUniqueOrThrowArgs} args - Arguments to find a UserRentalCar
     * @example
     * // Get one UserRentalCar
     * const userRentalCar = await prisma.userRentalCar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserRentalCarFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserRentalCarFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>>

    /**
     * Find the first UserRentalCar that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRentalCarFindFirstOrThrowArgs} args - Arguments to find a UserRentalCar
     * @example
     * // Get one UserRentalCar
     * const userRentalCar = await prisma.userRentalCar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserRentalCarFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserRentalCarFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserRentalCarClient<UserRentalCar>, Prisma__UserRentalCarClient<UserRentalCarGetPayload<T>>>

    /**
     * Count the number of UserRentalCars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRentalCarCountArgs} args - Arguments to filter UserRentalCars to count.
     * @example
     * // Count the number of UserRentalCars
     * const count = await prisma.userRentalCar.count({
     *   where: {
     *     // ... the filter for the UserRentalCars we want to count
     *   }
     * })
    **/
    count<T extends UserRentalCarCountArgs>(
      args?: Subset<T, UserRentalCarCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRentalCarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRentalCar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRentalCarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRentalCarAggregateArgs>(args: Subset<T, UserRentalCarAggregateArgs>): PrismaPromise<GetUserRentalCarAggregateType<T>>

    /**
     * Group by UserRentalCar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRentalCarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRentalCarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRentalCarGroupByArgs['orderBy'] }
        : { orderBy?: UserRentalCarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRentalCarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRentalCarGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRentalCar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserRentalCarClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fk_car_rental<T extends CarArgs = {}>(args?: Subset<T, CarArgs>): CheckSelect<T, Prisma__CarClient<Car | null >, Prisma__CarClient<CarGetPayload<T> | null >>;

    fk_user_rental<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserRentalCar base type for findUnique actions
   */
  export type UserRentalCarFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
    /**
     * Filter, which UserRentalCar to fetch.
     * 
    **/
    where: UserRentalCarWhereUniqueInput
  }

  /**
   * UserRentalCar: findUnique
   */
  export interface UserRentalCarFindUniqueArgs extends UserRentalCarFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserRentalCar base type for findFirst actions
   */
  export type UserRentalCarFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
    /**
     * Filter, which UserRentalCar to fetch.
     * 
    **/
    where?: UserRentalCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRentalCars to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRentalCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRentalCars.
     * 
    **/
    cursor?: UserRentalCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRentalCars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRentalCars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRentalCars.
     * 
    **/
    distinct?: Enumerable<UserRentalCarScalarFieldEnum>
  }

  /**
   * UserRentalCar: findFirst
   */
  export interface UserRentalCarFindFirstArgs extends UserRentalCarFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserRentalCar findMany
   */
  export type UserRentalCarFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
    /**
     * Filter, which UserRentalCars to fetch.
     * 
    **/
    where?: UserRentalCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRentalCars to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRentalCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRentalCars.
     * 
    **/
    cursor?: UserRentalCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRentalCars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRentalCars.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserRentalCarScalarFieldEnum>
  }


  /**
   * UserRentalCar create
   */
  export type UserRentalCarCreateArgs = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
    /**
     * The data needed to create a UserRentalCar.
     * 
    **/
    data: XOR<UserRentalCarCreateInput, UserRentalCarUncheckedCreateInput>
  }


  /**
   * UserRentalCar createMany
   */
  export type UserRentalCarCreateManyArgs = {
    /**
     * The data used to create many UserRentalCars.
     * 
    **/
    data: Enumerable<UserRentalCarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserRentalCar update
   */
  export type UserRentalCarUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
    /**
     * The data needed to update a UserRentalCar.
     * 
    **/
    data: XOR<UserRentalCarUpdateInput, UserRentalCarUncheckedUpdateInput>
    /**
     * Choose, which UserRentalCar to update.
     * 
    **/
    where: UserRentalCarWhereUniqueInput
  }


  /**
   * UserRentalCar updateMany
   */
  export type UserRentalCarUpdateManyArgs = {
    /**
     * The data used to update UserRentalCars.
     * 
    **/
    data: XOR<UserRentalCarUpdateManyMutationInput, UserRentalCarUncheckedUpdateManyInput>
    /**
     * Filter which UserRentalCars to update
     * 
    **/
    where?: UserRentalCarWhereInput
  }


  /**
   * UserRentalCar upsert
   */
  export type UserRentalCarUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
    /**
     * The filter to search for the UserRentalCar to update in case it exists.
     * 
    **/
    where: UserRentalCarWhereUniqueInput
    /**
     * In case the UserRentalCar found by the `where` argument doesn't exist, create a new UserRentalCar with this data.
     * 
    **/
    create: XOR<UserRentalCarCreateInput, UserRentalCarUncheckedCreateInput>
    /**
     * In case the UserRentalCar was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserRentalCarUpdateInput, UserRentalCarUncheckedUpdateInput>
  }


  /**
   * UserRentalCar delete
   */
  export type UserRentalCarDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
    /**
     * Filter which UserRentalCar to delete.
     * 
    **/
    where: UserRentalCarWhereUniqueInput
  }


  /**
   * UserRentalCar deleteMany
   */
  export type UserRentalCarDeleteManyArgs = {
    /**
     * Filter which UserRentalCars to delete
     * 
    **/
    where?: UserRentalCarWhereInput
  }


  /**
   * UserRentalCar: findUniqueOrThrow
   */
  export type UserRentalCarFindUniqueOrThrowArgs = UserRentalCarFindUniqueArgsBase
      

  /**
   * UserRentalCar: findFirstOrThrow
   */
  export type UserRentalCarFindFirstOrThrowArgs = UserRentalCarFindFirstArgsBase
      

  /**
   * UserRentalCar without action
   */
  export type UserRentalCarArgs = {
    /**
     * Select specific fields to fetch from the UserRentalCar
     * 
    **/
    select?: UserRentalCarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRentalCarInclude | null
  }



  /**
   * Model RefreshToken
   */


  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    refresh_token: string | null
    user_id: string | null
    expires_in: Date | null
    machine_ip: string | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    refresh_token: string | null
    user_id: string | null
    expires_in: Date | null
    machine_ip: string | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    refresh_token: number
    user_id: number
    expires_in: number
    machine_ip: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    refresh_token?: true
    user_id?: true
    expires_in?: true
    machine_ip?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    refresh_token?: true
    user_id?: true
    expires_in?: true
    machine_ip?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    refresh_token?: true
    user_id?: true
    expires_in?: true
    machine_ip?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs = {
    /**
     * Filter which RefreshToken to aggregate.
     * 
    **/
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<RefreshTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs = {
    where?: RefreshTokenWhereInput
    orderBy?: Enumerable<RefreshTokenOrderByWithAggregationInput>
    by: Array<RefreshTokenScalarFieldEnum>
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }


  export type RefreshTokenGroupByOutputType = {
    id: string
    refresh_token: string
    user_id: string
    expires_in: Date
    machine_ip: string
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect = {
    id?: boolean
    refresh_token?: boolean
    user_id?: boolean
    user?: boolean | UserArgs
    expires_in?: boolean
    machine_ip?: boolean
  }

  export type RefreshTokenInclude = {
    user?: boolean | UserArgs
  }

  export type RefreshTokenGetPayload<
    S extends boolean | null | undefined | RefreshTokenArgs,
    U = keyof S
      > = S extends true
        ? RefreshToken
    : S extends undefined
    ? never
    : S extends RefreshTokenArgs | RefreshTokenFindManyArgs
    ?'include' extends U
    ? RefreshToken  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof RefreshToken ? RefreshToken[P] : never
  } 
    : RefreshToken
  : RefreshToken


  type RefreshTokenCountArgs = Merge<
    Omit<RefreshTokenFindManyArgs, 'select' | 'include'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }
  >

  export interface RefreshTokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RefreshTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RefreshTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RefreshToken'> extends True ? CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>> : CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken | null >, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T> | null >>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RefreshTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RefreshTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RefreshToken'> extends True ? CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>> : CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken | null >, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T> | null >>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RefreshTokenFindManyArgs>(
      args?: SelectSubset<T, RefreshTokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<RefreshToken>>, PrismaPromise<Array<RefreshTokenGetPayload<T>>>>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
    **/
    create<T extends RefreshTokenCreateArgs>(
      args: SelectSubset<T, RefreshTokenCreateArgs>
    ): CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>>

    /**
     * Create many RefreshTokens.
     *     @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     *     @example
     *     // Create many RefreshTokens
     *     const refreshToken = await prisma.refreshToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RefreshTokenCreateManyArgs>(
      args?: SelectSubset<T, RefreshTokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
    **/
    delete<T extends RefreshTokenDeleteArgs>(
      args: SelectSubset<T, RefreshTokenDeleteArgs>
    ): CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RefreshTokenUpdateArgs>(
      args: SelectSubset<T, RefreshTokenUpdateArgs>
    ): CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RefreshTokenDeleteManyArgs>(
      args?: SelectSubset<T, RefreshTokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RefreshTokenUpdateManyArgs>(
      args: SelectSubset<T, RefreshTokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
    **/
    upsert<T extends RefreshTokenUpsertArgs>(
      args: SelectSubset<T, RefreshTokenUpsertArgs>
    ): CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>>

    /**
     * Find one RefreshToken that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RefreshTokenClient<RefreshToken>, Prisma__RefreshTokenClient<RefreshTokenGetPayload<T>>>

    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RefreshTokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * RefreshToken base type for findUnique actions
   */
  export type RefreshTokenFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
    /**
     * Filter, which RefreshToken to fetch.
     * 
    **/
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken: findUnique
   */
  export interface RefreshTokenFindUniqueArgs extends RefreshTokenFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RefreshToken base type for findFirst actions
   */
  export type RefreshTokenFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
    /**
     * Filter, which RefreshToken to fetch.
     * 
    **/
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<RefreshTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     * 
    **/
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     * 
    **/
    distinct?: Enumerable<RefreshTokenScalarFieldEnum>
  }

  /**
   * RefreshToken: findFirst
   */
  export interface RefreshTokenFindFirstArgs extends RefreshTokenFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
    /**
     * Filter, which RefreshTokens to fetch.
     * 
    **/
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<RefreshTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     * 
    **/
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RefreshTokenScalarFieldEnum>
  }


  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
    /**
     * The data needed to create a RefreshToken.
     * 
    **/
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }


  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs = {
    /**
     * The data used to create many RefreshTokens.
     * 
    **/
    data: Enumerable<RefreshTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
    /**
     * The data needed to update a RefreshToken.
     * 
    **/
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     * 
    **/
    where: RefreshTokenWhereUniqueInput
  }


  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs = {
    /**
     * The data used to update RefreshTokens.
     * 
    **/
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     * 
    **/
    where?: RefreshTokenWhereInput
  }


  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     * 
    **/
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     * 
    **/
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }


  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
    /**
     * Filter which RefreshToken to delete.
     * 
    **/
    where: RefreshTokenWhereUniqueInput
  }


  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs = {
    /**
     * Filter which RefreshTokens to delete
     * 
    **/
    where?: RefreshTokenWhereInput
  }


  /**
   * RefreshToken: findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs = RefreshTokenFindUniqueArgsBase
      

  /**
   * RefreshToken: findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs = RefreshTokenFindFirstArgsBase
      

  /**
   * RefreshToken without action
   */
  export type RefreshTokenArgs = {
    /**
     * Select specific fields to fetch from the RefreshToken
     * 
    **/
    select?: RefreshTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefreshTokenInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    created_at: 'created_at'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SpecificationsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    created_at: 'created_at',
    car_id: 'car_id'
  };

  export type SpecificationsScalarFieldEnum = (typeof SpecificationsScalarFieldEnum)[keyof typeof SpecificationsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    password: 'password',
    email: 'email',
    driver_license: 'driver_license',
    isAdmin: 'isAdmin',
    created_at: 'created_at',
    avatar: 'avatar'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CarScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    daily_rate: 'daily_rate',
    available: 'available',
    license_plate: 'license_plate',
    fine_amount: 'fine_amount',
    brand: 'brand',
    created_at: 'created_at',
    category_id: 'category_id'
  };

  export type CarScalarFieldEnum = (typeof CarScalarFieldEnum)[keyof typeof CarScalarFieldEnum]


  export const CarImagesScalarFieldEnum: {
    id: 'id',
    image_name: 'image_name',
    car_id: 'car_id',
    created_at: 'created_at'
  };

  export type CarImagesScalarFieldEnum = (typeof CarImagesScalarFieldEnum)[keyof typeof CarImagesScalarFieldEnum]


  export const CarSpecificationScalarFieldEnum: {
    car_id: 'car_id',
    specification_id: 'specification_id'
  };

  export type CarSpecificationScalarFieldEnum = (typeof CarSpecificationScalarFieldEnum)[keyof typeof CarSpecificationScalarFieldEnum]


  export const RentalsScalarFieldEnum: {
    id: 'id',
    start_date: 'start_date',
    end_date: 'end_date',
    expect_return_date: 'expect_return_date',
    total: 'total',
    created_at: 'created_at',
    updated_at: 'updated_at',
    user_id: 'user_id',
    car_id: 'car_id'
  };

  export type RentalsScalarFieldEnum = (typeof RentalsScalarFieldEnum)[keyof typeof RentalsScalarFieldEnum]


  export const UserRentalCarScalarFieldEnum: {
    car_id: 'car_id',
    user_id: 'user_id'
  };

  export type UserRentalCarScalarFieldEnum = (typeof UserRentalCarScalarFieldEnum)[keyof typeof UserRentalCarScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    refresh_token: 'refresh_token',
    user_id: 'user_id',
    expires_in: 'expires_in',
    machine_ip: 'machine_ip'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    car?: CarListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    car?: CarOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SpecificationsWhereInput = {
    AND?: Enumerable<SpecificationsWhereInput>
    OR?: Enumerable<SpecificationsWhereInput>
    NOT?: Enumerable<SpecificationsWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    CarEspecification?: CarSpecificationListRelationFilter
    Car?: XOR<CarRelationFilter, CarWhereInput>
    car_id?: StringFilter | string
  }

  export type SpecificationsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    CarEspecification?: CarSpecificationOrderByRelationAggregateInput
    Car?: CarOrderByWithRelationInput
    car_id?: SortOrder
  }

  export type SpecificationsWhereUniqueInput = {
    id?: string
    name?: string
    car_id?: string
  }

  export type SpecificationsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    car_id?: SortOrder
    _count?: SpecificationsCountOrderByAggregateInput
    _max?: SpecificationsMaxOrderByAggregateInput
    _min?: SpecificationsMinOrderByAggregateInput
  }

  export type SpecificationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SpecificationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SpecificationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SpecificationsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    car_id?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    email?: StringFilter | string
    driver_license?: StringFilter | string
    isAdmin?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    avatar?: StringNullableFilter | string | null
    Rentals?: RentalsListRelationFilter
    UserRentalCar?: UserRentalCarListRelationFilter
    RefreshToken?: RefreshTokenListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    driver_license?: SortOrder
    isAdmin?: SortOrder
    created_at?: SortOrder
    avatar?: SortOrder
    Rentals?: RentalsOrderByRelationAggregateInput
    UserRentalCar?: UserRentalCarOrderByRelationAggregateInput
    RefreshToken?: RefreshTokenOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
    password?: string
    email?: string
    driver_license?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    driver_license?: SortOrder
    isAdmin?: SortOrder
    created_at?: SortOrder
    avatar?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    driver_license?: StringWithAggregatesFilter | string
    isAdmin?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    avatar?: StringNullableWithAggregatesFilter | string | null
  }

  export type CarWhereInput = {
    AND?: Enumerable<CarWhereInput>
    OR?: Enumerable<CarWhereInput>
    NOT?: Enumerable<CarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    daily_rate?: IntFilter | number
    available?: BoolFilter | boolean
    license_plate?: StringFilter | string
    fine_amount?: IntFilter | number
    brand?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    fk_category_id?: XOR<CategoryRelationFilter, CategoryWhereInput>
    category_id?: StringFilter | string
    CarSpecification?: CarSpecificationListRelationFilter
    Specifications?: SpecificationsListRelationFilter
    CarImages?: CarImagesListRelationFilter
    Rentals?: RentalsListRelationFilter
    UserRentalCar?: UserRentalCarListRelationFilter
  }

  export type CarOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    daily_rate?: SortOrder
    available?: SortOrder
    license_plate?: SortOrder
    fine_amount?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    fk_category_id?: CategoryOrderByWithRelationInput
    category_id?: SortOrder
    CarSpecification?: CarSpecificationOrderByRelationAggregateInput
    Specifications?: SpecificationsOrderByRelationAggregateInput
    CarImages?: CarImagesOrderByRelationAggregateInput
    Rentals?: RentalsOrderByRelationAggregateInput
    UserRentalCar?: UserRentalCarOrderByRelationAggregateInput
  }

  export type CarWhereUniqueInput = {
    id?: string
    name?: string
    license_plate?: string
  }

  export type CarOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    daily_rate?: SortOrder
    available?: SortOrder
    license_plate?: SortOrder
    fine_amount?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    category_id?: SortOrder
    _count?: CarCountOrderByAggregateInput
    _avg?: CarAvgOrderByAggregateInput
    _max?: CarMaxOrderByAggregateInput
    _min?: CarMinOrderByAggregateInput
    _sum?: CarSumOrderByAggregateInput
  }

  export type CarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    daily_rate?: IntWithAggregatesFilter | number
    available?: BoolWithAggregatesFilter | boolean
    license_plate?: StringWithAggregatesFilter | string
    fine_amount?: IntWithAggregatesFilter | number
    brand?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    category_id?: StringWithAggregatesFilter | string
  }

  export type CarImagesWhereInput = {
    AND?: Enumerable<CarImagesWhereInput>
    OR?: Enumerable<CarImagesWhereInput>
    NOT?: Enumerable<CarImagesWhereInput>
    id?: StringFilter | string
    image_name?: StringFilter | string
    car_id?: StringFilter | string
    car?: XOR<CarRelationFilter, CarWhereInput>
    created_at?: DateTimeFilter | Date | string
  }

  export type CarImagesOrderByWithRelationInput = {
    id?: SortOrder
    image_name?: SortOrder
    car_id?: SortOrder
    car?: CarOrderByWithRelationInput
    created_at?: SortOrder
  }

  export type CarImagesWhereUniqueInput = {
    id?: string
  }

  export type CarImagesOrderByWithAggregationInput = {
    id?: SortOrder
    image_name?: SortOrder
    car_id?: SortOrder
    created_at?: SortOrder
    _count?: CarImagesCountOrderByAggregateInput
    _max?: CarImagesMaxOrderByAggregateInput
    _min?: CarImagesMinOrderByAggregateInput
  }

  export type CarImagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarImagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarImagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarImagesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    image_name?: StringWithAggregatesFilter | string
    car_id?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CarSpecificationWhereInput = {
    AND?: Enumerable<CarSpecificationWhereInput>
    OR?: Enumerable<CarSpecificationWhereInput>
    NOT?: Enumerable<CarSpecificationWhereInput>
    car_id?: StringFilter | string
    car?: XOR<CarRelationFilter, CarWhereInput>
    specification_id?: StringFilter | string
    specification?: XOR<SpecificationsRelationFilter, SpecificationsWhereInput>
  }

  export type CarSpecificationOrderByWithRelationInput = {
    car_id?: SortOrder
    car?: CarOrderByWithRelationInput
    specification_id?: SortOrder
    specification?: SpecificationsOrderByWithRelationInput
  }

  export type CarSpecificationWhereUniqueInput = {
    car_id?: string
    specification_id?: string
    car_id_specification_id?: CarSpecificationCar_idSpecification_idCompoundUniqueInput
  }

  export type CarSpecificationOrderByWithAggregationInput = {
    car_id?: SortOrder
    specification_id?: SortOrder
    _count?: CarSpecificationCountOrderByAggregateInput
    _max?: CarSpecificationMaxOrderByAggregateInput
    _min?: CarSpecificationMinOrderByAggregateInput
  }

  export type CarSpecificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarSpecificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarSpecificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarSpecificationScalarWhereWithAggregatesInput>
    car_id?: StringWithAggregatesFilter | string
    specification_id?: StringWithAggregatesFilter | string
  }

  export type RentalsWhereInput = {
    AND?: Enumerable<RentalsWhereInput>
    OR?: Enumerable<RentalsWhereInput>
    NOT?: Enumerable<RentalsWhereInput>
    id?: StringFilter | string
    start_date?: DateTimeFilter | Date | string
    end_date?: DateTimeNullableFilter | Date | string | null
    expect_return_date?: DateTimeFilter | Date | string
    total?: IntNullableFilter | number | null
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    user_id?: StringFilter | string
    Car?: XOR<CarRelationFilter, CarWhereInput>
    car_id?: StringFilter | string
  }

  export type RentalsOrderByWithRelationInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    expect_return_date?: SortOrder
    total?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    User?: UserOrderByWithRelationInput
    user_id?: SortOrder
    Car?: CarOrderByWithRelationInput
    car_id?: SortOrder
  }

  export type RentalsWhereUniqueInput = {
    id?: string
    user_id?: string
    car_id?: string
  }

  export type RentalsOrderByWithAggregationInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    expect_return_date?: SortOrder
    total?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    car_id?: SortOrder
    _count?: RentalsCountOrderByAggregateInput
    _avg?: RentalsAvgOrderByAggregateInput
    _max?: RentalsMaxOrderByAggregateInput
    _min?: RentalsMinOrderByAggregateInput
    _sum?: RentalsSumOrderByAggregateInput
  }

  export type RentalsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RentalsScalarWhereWithAggregatesInput>
    OR?: Enumerable<RentalsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RentalsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    start_date?: DateTimeWithAggregatesFilter | Date | string
    end_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    expect_return_date?: DateTimeWithAggregatesFilter | Date | string
    total?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    user_id?: StringWithAggregatesFilter | string
    car_id?: StringWithAggregatesFilter | string
  }

  export type UserRentalCarWhereInput = {
    AND?: Enumerable<UserRentalCarWhereInput>
    OR?: Enumerable<UserRentalCarWhereInput>
    NOT?: Enumerable<UserRentalCarWhereInput>
    car_id?: StringFilter | string
    fk_car_rental?: XOR<CarRelationFilter, CarWhereInput>
    user_id?: StringFilter | string
    fk_user_rental?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserRentalCarOrderByWithRelationInput = {
    car_id?: SortOrder
    fk_car_rental?: CarOrderByWithRelationInput
    user_id?: SortOrder
    fk_user_rental?: UserOrderByWithRelationInput
  }

  export type UserRentalCarWhereUniqueInput = {
    car_id_user_id?: UserRentalCarCar_idUser_idCompoundUniqueInput
  }

  export type UserRentalCarOrderByWithAggregationInput = {
    car_id?: SortOrder
    user_id?: SortOrder
    _count?: UserRentalCarCountOrderByAggregateInput
    _max?: UserRentalCarMaxOrderByAggregateInput
    _min?: UserRentalCarMinOrderByAggregateInput
  }

  export type UserRentalCarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserRentalCarScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserRentalCarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserRentalCarScalarWhereWithAggregatesInput>
    car_id?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
  }

  export type RefreshTokenWhereInput = {
    AND?: Enumerable<RefreshTokenWhereInput>
    OR?: Enumerable<RefreshTokenWhereInput>
    NOT?: Enumerable<RefreshTokenWhereInput>
    id?: StringFilter | string
    refresh_token?: StringFilter | string
    user_id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    expires_in?: DateTimeFilter | Date | string
    machine_ip?: StringFilter | string
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
    expires_in?: SortOrder
    machine_ip?: SortOrder
  }

  export type RefreshTokenWhereUniqueInput = {
    id?: string
  }

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    user_id?: SortOrder
    expires_in?: SortOrder
    machine_ip?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RefreshTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<RefreshTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RefreshTokenScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    refresh_token?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
    expires_in?: DateTimeWithAggregatesFilter | Date | string
    machine_ip?: StringWithAggregatesFilter | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    car?: CarCreateNestedManyWithoutFk_category_idInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    car?: CarUncheckedCreateNestedManyWithoutFk_category_idInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: CarUpdateManyWithoutFk_category_idNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: CarUncheckedUpdateManyWithoutFk_category_idNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecificationsCreateInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    CarEspecification?: CarSpecificationCreateNestedManyWithoutSpecificationInput
    Car: CarCreateNestedOneWithoutSpecificationsInput
  }

  export type SpecificationsUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    CarEspecification?: CarSpecificationUncheckedCreateNestedManyWithoutSpecificationInput
    car_id: string
  }

  export type SpecificationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    CarEspecification?: CarSpecificationUpdateManyWithoutSpecificationNestedInput
    Car?: CarUpdateOneRequiredWithoutSpecificationsNestedInput
  }

  export type SpecificationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    CarEspecification?: CarSpecificationUncheckedUpdateManyWithoutSpecificationNestedInput
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type SpecificationsCreateManyInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    car_id: string
  }

  export type SpecificationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecificationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    Rentals?: RentalsCreateNestedManyWithoutUserInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_user_rentalInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    Rentals?: RentalsUncheckedCreateNestedManyWithoutUserInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_user_rentalInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Rentals?: RentalsUpdateManyWithoutUserNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_user_rentalNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Rentals?: RentalsUncheckedUpdateManyWithoutUserNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_user_rentalNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarCreateInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    fk_category_id: CategoryCreateNestedOneWithoutCarInput
    CarSpecification?: CarSpecificationCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsCreateNestedManyWithoutCarInput
    CarImages?: CarImagesCreateNestedManyWithoutCarInput
    Rentals?: RentalsCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    category_id: string
    CarSpecification?: CarSpecificationUncheckedCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsUncheckedCreateNestedManyWithoutCarInput
    CarImages?: CarImagesUncheckedCreateNestedManyWithoutCarInput
    Rentals?: RentalsUncheckedCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fk_category_id?: CategoryUpdateOneRequiredWithoutCarNestedInput
    CarSpecification?: CarSpecificationUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category_id?: StringFieldUpdateOperationsInput | string
    CarSpecification?: CarSpecificationUncheckedUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUncheckedUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUncheckedUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUncheckedUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarCreateManyInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    category_id: string
  }

  export type CarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category_id?: StringFieldUpdateOperationsInput | string
  }

  export type CarImagesCreateInput = {
    id?: string
    image_name: string
    car: CarCreateNestedOneWithoutCarImagesInput
    created_at?: Date | string
  }

  export type CarImagesUncheckedCreateInput = {
    id?: string
    image_name: string
    car_id: string
    created_at?: Date | string
  }

  export type CarImagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_name?: StringFieldUpdateOperationsInput | string
    car?: CarUpdateOneRequiredWithoutCarImagesNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarImagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_name?: StringFieldUpdateOperationsInput | string
    car_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarImagesCreateManyInput = {
    id?: string
    image_name: string
    car_id: string
    created_at?: Date | string
  }

  export type CarImagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarImagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_name?: StringFieldUpdateOperationsInput | string
    car_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarSpecificationCreateInput = {
    car: CarCreateNestedOneWithoutCarSpecificationInput
    specification: SpecificationsCreateNestedOneWithoutCarEspecificationInput
  }

  export type CarSpecificationUncheckedCreateInput = {
    car_id: string
    specification_id: string
  }

  export type CarSpecificationUpdateInput = {
    car?: CarUpdateOneRequiredWithoutCarSpecificationNestedInput
    specification?: SpecificationsUpdateOneRequiredWithoutCarEspecificationNestedInput
  }

  export type CarSpecificationUncheckedUpdateInput = {
    car_id?: StringFieldUpdateOperationsInput | string
    specification_id?: StringFieldUpdateOperationsInput | string
  }

  export type CarSpecificationCreateManyInput = {
    car_id: string
    specification_id: string
  }

  export type CarSpecificationUpdateManyMutationInput = {

  }

  export type CarSpecificationUncheckedUpdateManyInput = {
    car_id?: StringFieldUpdateOperationsInput | string
    specification_id?: StringFieldUpdateOperationsInput | string
  }

  export type RentalsCreateInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    User: UserCreateNestedOneWithoutRentalsInput
    Car: CarCreateNestedOneWithoutRentalsInput
  }

  export type RentalsUncheckedCreateInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    user_id: string
    car_id: string
  }

  export type RentalsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutRentalsNestedInput
    Car?: CarUpdateOneRequiredWithoutRentalsNestedInput
  }

  export type RentalsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type RentalsCreateManyInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    user_id: string
    car_id: string
  }

  export type RentalsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentalsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserRentalCarCreateInput = {
    fk_car_rental: CarCreateNestedOneWithoutUserRentalCarInput
    fk_user_rental: UserCreateNestedOneWithoutUserRentalCarInput
  }

  export type UserRentalCarUncheckedCreateInput = {
    car_id: string
    user_id: string
  }

  export type UserRentalCarUpdateInput = {
    fk_car_rental?: CarUpdateOneRequiredWithoutUserRentalCarNestedInput
    fk_user_rental?: UserUpdateOneRequiredWithoutUserRentalCarNestedInput
  }

  export type UserRentalCarUncheckedUpdateInput = {
    car_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserRentalCarCreateManyInput = {
    car_id: string
    user_id: string
  }

  export type UserRentalCarUpdateManyMutationInput = {

  }

  export type UserRentalCarUncheckedUpdateManyInput = {
    car_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenCreateInput = {
    id?: string
    refresh_token: string
    user: UserCreateNestedOneWithoutRefreshTokenInput
    expires_in: Date | string
    machine_ip: string
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    refresh_token: string
    user_id: string
    expires_in: Date | string
    machine_ip: string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutRefreshTokenNestedInput
    expires_in?: DateTimeFieldUpdateOperationsInput | Date | string
    machine_ip?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    expires_in?: DateTimeFieldUpdateOperationsInput | Date | string
    machine_ip?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    refresh_token: string
    user_id: string
    expires_in: Date | string
    machine_ip: string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_in?: DateTimeFieldUpdateOperationsInput | Date | string
    machine_ip?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    expires_in?: DateTimeFieldUpdateOperationsInput | Date | string
    machine_ip?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CarListRelationFilter = {
    every?: CarWhereInput
    some?: CarWhereInput
    none?: CarWhereInput
  }

  export type CarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CarSpecificationListRelationFilter = {
    every?: CarSpecificationWhereInput
    some?: CarSpecificationWhereInput
    none?: CarSpecificationWhereInput
  }

  export type CarRelationFilter = {
    is?: CarWhereInput
    isNot?: CarWhereInput
  }

  export type CarSpecificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecificationsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    car_id?: SortOrder
  }

  export type SpecificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    car_id?: SortOrder
  }

  export type SpecificationsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    car_id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type RentalsListRelationFilter = {
    every?: RentalsWhereInput
    some?: RentalsWhereInput
    none?: RentalsWhereInput
  }

  export type UserRentalCarListRelationFilter = {
    every?: UserRentalCarWhereInput
    some?: UserRentalCarWhereInput
    none?: UserRentalCarWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type RentalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRentalCarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    driver_license?: SortOrder
    isAdmin?: SortOrder
    created_at?: SortOrder
    avatar?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    driver_license?: SortOrder
    isAdmin?: SortOrder
    created_at?: SortOrder
    avatar?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    driver_license?: SortOrder
    isAdmin?: SortOrder
    created_at?: SortOrder
    avatar?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type SpecificationsListRelationFilter = {
    every?: SpecificationsWhereInput
    some?: SpecificationsWhereInput
    none?: SpecificationsWhereInput
  }

  export type CarImagesListRelationFilter = {
    every?: CarImagesWhereInput
    some?: CarImagesWhereInput
    none?: CarImagesWhereInput
  }

  export type SpecificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarImagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    daily_rate?: SortOrder
    available?: SortOrder
    license_plate?: SortOrder
    fine_amount?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    category_id?: SortOrder
  }

  export type CarAvgOrderByAggregateInput = {
    daily_rate?: SortOrder
    fine_amount?: SortOrder
  }

  export type CarMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    daily_rate?: SortOrder
    available?: SortOrder
    license_plate?: SortOrder
    fine_amount?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    category_id?: SortOrder
  }

  export type CarMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    daily_rate?: SortOrder
    available?: SortOrder
    license_plate?: SortOrder
    fine_amount?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    category_id?: SortOrder
  }

  export type CarSumOrderByAggregateInput = {
    daily_rate?: SortOrder
    fine_amount?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type CarImagesCountOrderByAggregateInput = {
    id?: SortOrder
    image_name?: SortOrder
    car_id?: SortOrder
    created_at?: SortOrder
  }

  export type CarImagesMaxOrderByAggregateInput = {
    id?: SortOrder
    image_name?: SortOrder
    car_id?: SortOrder
    created_at?: SortOrder
  }

  export type CarImagesMinOrderByAggregateInput = {
    id?: SortOrder
    image_name?: SortOrder
    car_id?: SortOrder
    created_at?: SortOrder
  }

  export type SpecificationsRelationFilter = {
    is?: SpecificationsWhereInput
    isNot?: SpecificationsWhereInput
  }

  export type CarSpecificationCar_idSpecification_idCompoundUniqueInput = {
    car_id: string
    specification_id: string
  }

  export type CarSpecificationCountOrderByAggregateInput = {
    car_id?: SortOrder
    specification_id?: SortOrder
  }

  export type CarSpecificationMaxOrderByAggregateInput = {
    car_id?: SortOrder
    specification_id?: SortOrder
  }

  export type CarSpecificationMinOrderByAggregateInput = {
    car_id?: SortOrder
    specification_id?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RentalsCountOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    expect_return_date?: SortOrder
    total?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    car_id?: SortOrder
  }

  export type RentalsAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type RentalsMaxOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    expect_return_date?: SortOrder
    total?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    car_id?: SortOrder
  }

  export type RentalsMinOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    expect_return_date?: SortOrder
    total?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    car_id?: SortOrder
  }

  export type RentalsSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type UserRentalCarCar_idUser_idCompoundUniqueInput = {
    car_id: string
    user_id: string
  }

  export type UserRentalCarCountOrderByAggregateInput = {
    car_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserRentalCarMaxOrderByAggregateInput = {
    car_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserRentalCarMinOrderByAggregateInput = {
    car_id?: SortOrder
    user_id?: SortOrder
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    user_id?: SortOrder
    expires_in?: SortOrder
    machine_ip?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    user_id?: SortOrder
    expires_in?: SortOrder
    machine_ip?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    refresh_token?: SortOrder
    user_id?: SortOrder
    expires_in?: SortOrder
    machine_ip?: SortOrder
  }

  export type CarCreateNestedManyWithoutFk_category_idInput = {
    create?: XOR<Enumerable<CarCreateWithoutFk_category_idInput>, Enumerable<CarUncheckedCreateWithoutFk_category_idInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutFk_category_idInput>
    createMany?: CarCreateManyFk_category_idInputEnvelope
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUncheckedCreateNestedManyWithoutFk_category_idInput = {
    create?: XOR<Enumerable<CarCreateWithoutFk_category_idInput>, Enumerable<CarUncheckedCreateWithoutFk_category_idInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutFk_category_idInput>
    createMany?: CarCreateManyFk_category_idInputEnvelope
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CarUpdateManyWithoutFk_category_idNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutFk_category_idInput>, Enumerable<CarUncheckedCreateWithoutFk_category_idInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutFk_category_idInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutFk_category_idInput>
    createMany?: CarCreateManyFk_category_idInputEnvelope
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutFk_category_idInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutFk_category_idInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarUncheckedUpdateManyWithoutFk_category_idNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutFk_category_idInput>, Enumerable<CarUncheckedCreateWithoutFk_category_idInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutFk_category_idInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutFk_category_idInput>
    createMany?: CarCreateManyFk_category_idInputEnvelope
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutFk_category_idInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutFk_category_idInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarSpecificationCreateNestedManyWithoutSpecificationInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutSpecificationInput>, Enumerable<CarSpecificationUncheckedCreateWithoutSpecificationInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutSpecificationInput>
    createMany?: CarSpecificationCreateManySpecificationInputEnvelope
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
  }

  export type CarCreateNestedOneWithoutSpecificationsInput = {
    create?: XOR<CarCreateWithoutSpecificationsInput, CarUncheckedCreateWithoutSpecificationsInput>
    connectOrCreate?: CarCreateOrConnectWithoutSpecificationsInput
    connect?: CarWhereUniqueInput
  }

  export type CarSpecificationUncheckedCreateNestedManyWithoutSpecificationInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutSpecificationInput>, Enumerable<CarSpecificationUncheckedCreateWithoutSpecificationInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutSpecificationInput>
    createMany?: CarSpecificationCreateManySpecificationInputEnvelope
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
  }

  export type CarSpecificationUpdateManyWithoutSpecificationNestedInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutSpecificationInput>, Enumerable<CarSpecificationUncheckedCreateWithoutSpecificationInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutSpecificationInput>
    upsert?: Enumerable<CarSpecificationUpsertWithWhereUniqueWithoutSpecificationInput>
    createMany?: CarSpecificationCreateManySpecificationInputEnvelope
    set?: Enumerable<CarSpecificationWhereUniqueInput>
    disconnect?: Enumerable<CarSpecificationWhereUniqueInput>
    delete?: Enumerable<CarSpecificationWhereUniqueInput>
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
    update?: Enumerable<CarSpecificationUpdateWithWhereUniqueWithoutSpecificationInput>
    updateMany?: Enumerable<CarSpecificationUpdateManyWithWhereWithoutSpecificationInput>
    deleteMany?: Enumerable<CarSpecificationScalarWhereInput>
  }

  export type CarUpdateOneRequiredWithoutSpecificationsNestedInput = {
    create?: XOR<CarCreateWithoutSpecificationsInput, CarUncheckedCreateWithoutSpecificationsInput>
    connectOrCreate?: CarCreateOrConnectWithoutSpecificationsInput
    upsert?: CarUpsertWithoutSpecificationsInput
    connect?: CarWhereUniqueInput
    update?: XOR<CarUpdateWithoutSpecificationsInput, CarUncheckedUpdateWithoutSpecificationsInput>
  }

  export type CarSpecificationUncheckedUpdateManyWithoutSpecificationNestedInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutSpecificationInput>, Enumerable<CarSpecificationUncheckedCreateWithoutSpecificationInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutSpecificationInput>
    upsert?: Enumerable<CarSpecificationUpsertWithWhereUniqueWithoutSpecificationInput>
    createMany?: CarSpecificationCreateManySpecificationInputEnvelope
    set?: Enumerable<CarSpecificationWhereUniqueInput>
    disconnect?: Enumerable<CarSpecificationWhereUniqueInput>
    delete?: Enumerable<CarSpecificationWhereUniqueInput>
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
    update?: Enumerable<CarSpecificationUpdateWithWhereUniqueWithoutSpecificationInput>
    updateMany?: Enumerable<CarSpecificationUpdateManyWithWhereWithoutSpecificationInput>
    deleteMany?: Enumerable<CarSpecificationScalarWhereInput>
  }

  export type RentalsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutUserInput>, Enumerable<RentalsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutUserInput>
    createMany?: RentalsCreateManyUserInputEnvelope
    connect?: Enumerable<RentalsWhereUniqueInput>
  }

  export type UserRentalCarCreateNestedManyWithoutFk_user_rentalInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_user_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_user_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_user_rentalInput>
    createMany?: UserRentalCarCreateManyFk_user_rentalInputEnvelope
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RefreshTokenCreateWithoutUserInput>, Enumerable<RefreshTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RefreshTokenCreateOrConnectWithoutUserInput>
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: Enumerable<RefreshTokenWhereUniqueInput>
  }

  export type RentalsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutUserInput>, Enumerable<RentalsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutUserInput>
    createMany?: RentalsCreateManyUserInputEnvelope
    connect?: Enumerable<RentalsWhereUniqueInput>
  }

  export type UserRentalCarUncheckedCreateNestedManyWithoutFk_user_rentalInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_user_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_user_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_user_rentalInput>
    createMany?: UserRentalCarCreateManyFk_user_rentalInputEnvelope
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RefreshTokenCreateWithoutUserInput>, Enumerable<RefreshTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RefreshTokenCreateOrConnectWithoutUserInput>
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: Enumerable<RefreshTokenWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RentalsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutUserInput>, Enumerable<RentalsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RentalsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RentalsCreateManyUserInputEnvelope
    set?: Enumerable<RentalsWhereUniqueInput>
    disconnect?: Enumerable<RentalsWhereUniqueInput>
    delete?: Enumerable<RentalsWhereUniqueInput>
    connect?: Enumerable<RentalsWhereUniqueInput>
    update?: Enumerable<RentalsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RentalsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RentalsScalarWhereInput>
  }

  export type UserRentalCarUpdateManyWithoutFk_user_rentalNestedInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_user_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_user_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_user_rentalInput>
    upsert?: Enumerable<UserRentalCarUpsertWithWhereUniqueWithoutFk_user_rentalInput>
    createMany?: UserRentalCarCreateManyFk_user_rentalInputEnvelope
    set?: Enumerable<UserRentalCarWhereUniqueInput>
    disconnect?: Enumerable<UserRentalCarWhereUniqueInput>
    delete?: Enumerable<UserRentalCarWhereUniqueInput>
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
    update?: Enumerable<UserRentalCarUpdateWithWhereUniqueWithoutFk_user_rentalInput>
    updateMany?: Enumerable<UserRentalCarUpdateManyWithWhereWithoutFk_user_rentalInput>
    deleteMany?: Enumerable<UserRentalCarScalarWhereInput>
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RefreshTokenCreateWithoutUserInput>, Enumerable<RefreshTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RefreshTokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RefreshTokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: Enumerable<RefreshTokenWhereUniqueInput>
    disconnect?: Enumerable<RefreshTokenWhereUniqueInput>
    delete?: Enumerable<RefreshTokenWhereUniqueInput>
    connect?: Enumerable<RefreshTokenWhereUniqueInput>
    update?: Enumerable<RefreshTokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RefreshTokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RefreshTokenScalarWhereInput>
  }

  export type RentalsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutUserInput>, Enumerable<RentalsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RentalsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RentalsCreateManyUserInputEnvelope
    set?: Enumerable<RentalsWhereUniqueInput>
    disconnect?: Enumerable<RentalsWhereUniqueInput>
    delete?: Enumerable<RentalsWhereUniqueInput>
    connect?: Enumerable<RentalsWhereUniqueInput>
    update?: Enumerable<RentalsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RentalsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RentalsScalarWhereInput>
  }

  export type UserRentalCarUncheckedUpdateManyWithoutFk_user_rentalNestedInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_user_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_user_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_user_rentalInput>
    upsert?: Enumerable<UserRentalCarUpsertWithWhereUniqueWithoutFk_user_rentalInput>
    createMany?: UserRentalCarCreateManyFk_user_rentalInputEnvelope
    set?: Enumerable<UserRentalCarWhereUniqueInput>
    disconnect?: Enumerable<UserRentalCarWhereUniqueInput>
    delete?: Enumerable<UserRentalCarWhereUniqueInput>
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
    update?: Enumerable<UserRentalCarUpdateWithWhereUniqueWithoutFk_user_rentalInput>
    updateMany?: Enumerable<UserRentalCarUpdateManyWithWhereWithoutFk_user_rentalInput>
    deleteMany?: Enumerable<UserRentalCarScalarWhereInput>
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RefreshTokenCreateWithoutUserInput>, Enumerable<RefreshTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RefreshTokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RefreshTokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: Enumerable<RefreshTokenWhereUniqueInput>
    disconnect?: Enumerable<RefreshTokenWhereUniqueInput>
    delete?: Enumerable<RefreshTokenWhereUniqueInput>
    connect?: Enumerable<RefreshTokenWhereUniqueInput>
    update?: Enumerable<RefreshTokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RefreshTokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RefreshTokenScalarWhereInput>
  }

  export type CategoryCreateNestedOneWithoutCarInput = {
    create?: XOR<CategoryCreateWithoutCarInput, CategoryUncheckedCreateWithoutCarInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCarInput
    connect?: CategoryWhereUniqueInput
  }

  export type CarSpecificationCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutCarInput>, Enumerable<CarSpecificationUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutCarInput>
    createMany?: CarSpecificationCreateManyCarInputEnvelope
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
  }

  export type SpecificationsCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<SpecificationsCreateWithoutCarInput>, Enumerable<SpecificationsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<SpecificationsCreateOrConnectWithoutCarInput>
    createMany?: SpecificationsCreateManyCarInputEnvelope
    connect?: Enumerable<SpecificationsWhereUniqueInput>
  }

  export type CarImagesCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<CarImagesCreateWithoutCarInput>, Enumerable<CarImagesUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarImagesCreateOrConnectWithoutCarInput>
    createMany?: CarImagesCreateManyCarInputEnvelope
    connect?: Enumerable<CarImagesWhereUniqueInput>
  }

  export type RentalsCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutCarInput>, Enumerable<RentalsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutCarInput>
    createMany?: RentalsCreateManyCarInputEnvelope
    connect?: Enumerable<RentalsWhereUniqueInput>
  }

  export type UserRentalCarCreateNestedManyWithoutFk_car_rentalInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_car_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_car_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_car_rentalInput>
    createMany?: UserRentalCarCreateManyFk_car_rentalInputEnvelope
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
  }

  export type CarSpecificationUncheckedCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutCarInput>, Enumerable<CarSpecificationUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutCarInput>
    createMany?: CarSpecificationCreateManyCarInputEnvelope
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
  }

  export type SpecificationsUncheckedCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<SpecificationsCreateWithoutCarInput>, Enumerable<SpecificationsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<SpecificationsCreateOrConnectWithoutCarInput>
    createMany?: SpecificationsCreateManyCarInputEnvelope
    connect?: Enumerable<SpecificationsWhereUniqueInput>
  }

  export type CarImagesUncheckedCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<CarImagesCreateWithoutCarInput>, Enumerable<CarImagesUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarImagesCreateOrConnectWithoutCarInput>
    createMany?: CarImagesCreateManyCarInputEnvelope
    connect?: Enumerable<CarImagesWhereUniqueInput>
  }

  export type RentalsUncheckedCreateNestedManyWithoutCarInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutCarInput>, Enumerable<RentalsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutCarInput>
    createMany?: RentalsCreateManyCarInputEnvelope
    connect?: Enumerable<RentalsWhereUniqueInput>
  }

  export type UserRentalCarUncheckedCreateNestedManyWithoutFk_car_rentalInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_car_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_car_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_car_rentalInput>
    createMany?: UserRentalCarCreateManyFk_car_rentalInputEnvelope
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<CategoryCreateWithoutCarInput, CategoryUncheckedCreateWithoutCarInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCarInput
    upsert?: CategoryUpsertWithoutCarInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutCarInput, CategoryUncheckedUpdateWithoutCarInput>
  }

  export type CarSpecificationUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutCarInput>, Enumerable<CarSpecificationUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<CarSpecificationUpsertWithWhereUniqueWithoutCarInput>
    createMany?: CarSpecificationCreateManyCarInputEnvelope
    set?: Enumerable<CarSpecificationWhereUniqueInput>
    disconnect?: Enumerable<CarSpecificationWhereUniqueInput>
    delete?: Enumerable<CarSpecificationWhereUniqueInput>
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
    update?: Enumerable<CarSpecificationUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<CarSpecificationUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<CarSpecificationScalarWhereInput>
  }

  export type SpecificationsUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<SpecificationsCreateWithoutCarInput>, Enumerable<SpecificationsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<SpecificationsCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<SpecificationsUpsertWithWhereUniqueWithoutCarInput>
    createMany?: SpecificationsCreateManyCarInputEnvelope
    set?: Enumerable<SpecificationsWhereUniqueInput>
    disconnect?: Enumerable<SpecificationsWhereUniqueInput>
    delete?: Enumerable<SpecificationsWhereUniqueInput>
    connect?: Enumerable<SpecificationsWhereUniqueInput>
    update?: Enumerable<SpecificationsUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<SpecificationsUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<SpecificationsScalarWhereInput>
  }

  export type CarImagesUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<CarImagesCreateWithoutCarInput>, Enumerable<CarImagesUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarImagesCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<CarImagesUpsertWithWhereUniqueWithoutCarInput>
    createMany?: CarImagesCreateManyCarInputEnvelope
    set?: Enumerable<CarImagesWhereUniqueInput>
    disconnect?: Enumerable<CarImagesWhereUniqueInput>
    delete?: Enumerable<CarImagesWhereUniqueInput>
    connect?: Enumerable<CarImagesWhereUniqueInput>
    update?: Enumerable<CarImagesUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<CarImagesUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<CarImagesScalarWhereInput>
  }

  export type RentalsUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutCarInput>, Enumerable<RentalsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<RentalsUpsertWithWhereUniqueWithoutCarInput>
    createMany?: RentalsCreateManyCarInputEnvelope
    set?: Enumerable<RentalsWhereUniqueInput>
    disconnect?: Enumerable<RentalsWhereUniqueInput>
    delete?: Enumerable<RentalsWhereUniqueInput>
    connect?: Enumerable<RentalsWhereUniqueInput>
    update?: Enumerable<RentalsUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<RentalsUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<RentalsScalarWhereInput>
  }

  export type UserRentalCarUpdateManyWithoutFk_car_rentalNestedInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_car_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_car_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_car_rentalInput>
    upsert?: Enumerable<UserRentalCarUpsertWithWhereUniqueWithoutFk_car_rentalInput>
    createMany?: UserRentalCarCreateManyFk_car_rentalInputEnvelope
    set?: Enumerable<UserRentalCarWhereUniqueInput>
    disconnect?: Enumerable<UserRentalCarWhereUniqueInput>
    delete?: Enumerable<UserRentalCarWhereUniqueInput>
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
    update?: Enumerable<UserRentalCarUpdateWithWhereUniqueWithoutFk_car_rentalInput>
    updateMany?: Enumerable<UserRentalCarUpdateManyWithWhereWithoutFk_car_rentalInput>
    deleteMany?: Enumerable<UserRentalCarScalarWhereInput>
  }

  export type CarSpecificationUncheckedUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<CarSpecificationCreateWithoutCarInput>, Enumerable<CarSpecificationUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarSpecificationCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<CarSpecificationUpsertWithWhereUniqueWithoutCarInput>
    createMany?: CarSpecificationCreateManyCarInputEnvelope
    set?: Enumerable<CarSpecificationWhereUniqueInput>
    disconnect?: Enumerable<CarSpecificationWhereUniqueInput>
    delete?: Enumerable<CarSpecificationWhereUniqueInput>
    connect?: Enumerable<CarSpecificationWhereUniqueInput>
    update?: Enumerable<CarSpecificationUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<CarSpecificationUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<CarSpecificationScalarWhereInput>
  }

  export type SpecificationsUncheckedUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<SpecificationsCreateWithoutCarInput>, Enumerable<SpecificationsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<SpecificationsCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<SpecificationsUpsertWithWhereUniqueWithoutCarInput>
    createMany?: SpecificationsCreateManyCarInputEnvelope
    set?: Enumerable<SpecificationsWhereUniqueInput>
    disconnect?: Enumerable<SpecificationsWhereUniqueInput>
    delete?: Enumerable<SpecificationsWhereUniqueInput>
    connect?: Enumerable<SpecificationsWhereUniqueInput>
    update?: Enumerable<SpecificationsUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<SpecificationsUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<SpecificationsScalarWhereInput>
  }

  export type CarImagesUncheckedUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<CarImagesCreateWithoutCarInput>, Enumerable<CarImagesUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<CarImagesCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<CarImagesUpsertWithWhereUniqueWithoutCarInput>
    createMany?: CarImagesCreateManyCarInputEnvelope
    set?: Enumerable<CarImagesWhereUniqueInput>
    disconnect?: Enumerable<CarImagesWhereUniqueInput>
    delete?: Enumerable<CarImagesWhereUniqueInput>
    connect?: Enumerable<CarImagesWhereUniqueInput>
    update?: Enumerable<CarImagesUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<CarImagesUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<CarImagesScalarWhereInput>
  }

  export type RentalsUncheckedUpdateManyWithoutCarNestedInput = {
    create?: XOR<Enumerable<RentalsCreateWithoutCarInput>, Enumerable<RentalsUncheckedCreateWithoutCarInput>>
    connectOrCreate?: Enumerable<RentalsCreateOrConnectWithoutCarInput>
    upsert?: Enumerable<RentalsUpsertWithWhereUniqueWithoutCarInput>
    createMany?: RentalsCreateManyCarInputEnvelope
    set?: Enumerable<RentalsWhereUniqueInput>
    disconnect?: Enumerable<RentalsWhereUniqueInput>
    delete?: Enumerable<RentalsWhereUniqueInput>
    connect?: Enumerable<RentalsWhereUniqueInput>
    update?: Enumerable<RentalsUpdateWithWhereUniqueWithoutCarInput>
    updateMany?: Enumerable<RentalsUpdateManyWithWhereWithoutCarInput>
    deleteMany?: Enumerable<RentalsScalarWhereInput>
  }

  export type UserRentalCarUncheckedUpdateManyWithoutFk_car_rentalNestedInput = {
    create?: XOR<Enumerable<UserRentalCarCreateWithoutFk_car_rentalInput>, Enumerable<UserRentalCarUncheckedCreateWithoutFk_car_rentalInput>>
    connectOrCreate?: Enumerable<UserRentalCarCreateOrConnectWithoutFk_car_rentalInput>
    upsert?: Enumerable<UserRentalCarUpsertWithWhereUniqueWithoutFk_car_rentalInput>
    createMany?: UserRentalCarCreateManyFk_car_rentalInputEnvelope
    set?: Enumerable<UserRentalCarWhereUniqueInput>
    disconnect?: Enumerable<UserRentalCarWhereUniqueInput>
    delete?: Enumerable<UserRentalCarWhereUniqueInput>
    connect?: Enumerable<UserRentalCarWhereUniqueInput>
    update?: Enumerable<UserRentalCarUpdateWithWhereUniqueWithoutFk_car_rentalInput>
    updateMany?: Enumerable<UserRentalCarUpdateManyWithWhereWithoutFk_car_rentalInput>
    deleteMany?: Enumerable<UserRentalCarScalarWhereInput>
  }

  export type CarCreateNestedOneWithoutCarImagesInput = {
    create?: XOR<CarCreateWithoutCarImagesInput, CarUncheckedCreateWithoutCarImagesInput>
    connectOrCreate?: CarCreateOrConnectWithoutCarImagesInput
    connect?: CarWhereUniqueInput
  }

  export type CarUpdateOneRequiredWithoutCarImagesNestedInput = {
    create?: XOR<CarCreateWithoutCarImagesInput, CarUncheckedCreateWithoutCarImagesInput>
    connectOrCreate?: CarCreateOrConnectWithoutCarImagesInput
    upsert?: CarUpsertWithoutCarImagesInput
    connect?: CarWhereUniqueInput
    update?: XOR<CarUpdateWithoutCarImagesInput, CarUncheckedUpdateWithoutCarImagesInput>
  }

  export type CarCreateNestedOneWithoutCarSpecificationInput = {
    create?: XOR<CarCreateWithoutCarSpecificationInput, CarUncheckedCreateWithoutCarSpecificationInput>
    connectOrCreate?: CarCreateOrConnectWithoutCarSpecificationInput
    connect?: CarWhereUniqueInput
  }

  export type SpecificationsCreateNestedOneWithoutCarEspecificationInput = {
    create?: XOR<SpecificationsCreateWithoutCarEspecificationInput, SpecificationsUncheckedCreateWithoutCarEspecificationInput>
    connectOrCreate?: SpecificationsCreateOrConnectWithoutCarEspecificationInput
    connect?: SpecificationsWhereUniqueInput
  }

  export type CarUpdateOneRequiredWithoutCarSpecificationNestedInput = {
    create?: XOR<CarCreateWithoutCarSpecificationInput, CarUncheckedCreateWithoutCarSpecificationInput>
    connectOrCreate?: CarCreateOrConnectWithoutCarSpecificationInput
    upsert?: CarUpsertWithoutCarSpecificationInput
    connect?: CarWhereUniqueInput
    update?: XOR<CarUpdateWithoutCarSpecificationInput, CarUncheckedUpdateWithoutCarSpecificationInput>
  }

  export type SpecificationsUpdateOneRequiredWithoutCarEspecificationNestedInput = {
    create?: XOR<SpecificationsCreateWithoutCarEspecificationInput, SpecificationsUncheckedCreateWithoutCarEspecificationInput>
    connectOrCreate?: SpecificationsCreateOrConnectWithoutCarEspecificationInput
    upsert?: SpecificationsUpsertWithoutCarEspecificationInput
    connect?: SpecificationsWhereUniqueInput
    update?: XOR<SpecificationsUpdateWithoutCarEspecificationInput, SpecificationsUncheckedUpdateWithoutCarEspecificationInput>
  }

  export type UserCreateNestedOneWithoutRentalsInput = {
    create?: XOR<UserCreateWithoutRentalsInput, UserUncheckedCreateWithoutRentalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentalsInput
    connect?: UserWhereUniqueInput
  }

  export type CarCreateNestedOneWithoutRentalsInput = {
    create?: XOR<CarCreateWithoutRentalsInput, CarUncheckedCreateWithoutRentalsInput>
    connectOrCreate?: CarCreateOrConnectWithoutRentalsInput
    connect?: CarWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutRentalsNestedInput = {
    create?: XOR<UserCreateWithoutRentalsInput, UserUncheckedCreateWithoutRentalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentalsInput
    upsert?: UserUpsertWithoutRentalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRentalsInput, UserUncheckedUpdateWithoutRentalsInput>
  }

  export type CarUpdateOneRequiredWithoutRentalsNestedInput = {
    create?: XOR<CarCreateWithoutRentalsInput, CarUncheckedCreateWithoutRentalsInput>
    connectOrCreate?: CarCreateOrConnectWithoutRentalsInput
    upsert?: CarUpsertWithoutRentalsInput
    connect?: CarWhereUniqueInput
    update?: XOR<CarUpdateWithoutRentalsInput, CarUncheckedUpdateWithoutRentalsInput>
  }

  export type CarCreateNestedOneWithoutUserRentalCarInput = {
    create?: XOR<CarCreateWithoutUserRentalCarInput, CarUncheckedCreateWithoutUserRentalCarInput>
    connectOrCreate?: CarCreateOrConnectWithoutUserRentalCarInput
    connect?: CarWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserRentalCarInput = {
    create?: XOR<UserCreateWithoutUserRentalCarInput, UserUncheckedCreateWithoutUserRentalCarInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRentalCarInput
    connect?: UserWhereUniqueInput
  }

  export type CarUpdateOneRequiredWithoutUserRentalCarNestedInput = {
    create?: XOR<CarCreateWithoutUserRentalCarInput, CarUncheckedCreateWithoutUserRentalCarInput>
    connectOrCreate?: CarCreateOrConnectWithoutUserRentalCarInput
    upsert?: CarUpsertWithoutUserRentalCarInput
    connect?: CarWhereUniqueInput
    update?: XOR<CarUpdateWithoutUserRentalCarInput, CarUncheckedUpdateWithoutUserRentalCarInput>
  }

  export type UserUpdateOneRequiredWithoutUserRentalCarNestedInput = {
    create?: XOR<UserCreateWithoutUserRentalCarInput, UserUncheckedCreateWithoutUserRentalCarInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRentalCarInput
    upsert?: UserUpsertWithoutUserRentalCarInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserRentalCarInput, UserUncheckedUpdateWithoutUserRentalCarInput>
  }

  export type UserCreateNestedOneWithoutRefreshTokenInput = {
    create?: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokenInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokenNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokenInput
    upsert?: UserUpsertWithoutRefreshTokenInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRefreshTokenInput, UserUncheckedUpdateWithoutRefreshTokenInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type CarCreateWithoutFk_category_idInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    CarSpecification?: CarSpecificationCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsCreateNestedManyWithoutCarInput
    CarImages?: CarImagesCreateNestedManyWithoutCarInput
    Rentals?: RentalsCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarUncheckedCreateWithoutFk_category_idInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    CarSpecification?: CarSpecificationUncheckedCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsUncheckedCreateNestedManyWithoutCarInput
    CarImages?: CarImagesUncheckedCreateNestedManyWithoutCarInput
    Rentals?: RentalsUncheckedCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarCreateOrConnectWithoutFk_category_idInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutFk_category_idInput, CarUncheckedCreateWithoutFk_category_idInput>
  }

  export type CarCreateManyFk_category_idInputEnvelope = {
    data: Enumerable<CarCreateManyFk_category_idInput>
    skipDuplicates?: boolean
  }

  export type CarUpsertWithWhereUniqueWithoutFk_category_idInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutFk_category_idInput, CarUncheckedUpdateWithoutFk_category_idInput>
    create: XOR<CarCreateWithoutFk_category_idInput, CarUncheckedCreateWithoutFk_category_idInput>
  }

  export type CarUpdateWithWhereUniqueWithoutFk_category_idInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutFk_category_idInput, CarUncheckedUpdateWithoutFk_category_idInput>
  }

  export type CarUpdateManyWithWhereWithoutFk_category_idInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarInput>
  }

  export type CarScalarWhereInput = {
    AND?: Enumerable<CarScalarWhereInput>
    OR?: Enumerable<CarScalarWhereInput>
    NOT?: Enumerable<CarScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    daily_rate?: IntFilter | number
    available?: BoolFilter | boolean
    license_plate?: StringFilter | string
    fine_amount?: IntFilter | number
    brand?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    category_id?: StringFilter | string
  }

  export type CarSpecificationCreateWithoutSpecificationInput = {
    car: CarCreateNestedOneWithoutCarSpecificationInput
  }

  export type CarSpecificationUncheckedCreateWithoutSpecificationInput = {
    car_id: string
  }

  export type CarSpecificationCreateOrConnectWithoutSpecificationInput = {
    where: CarSpecificationWhereUniqueInput
    create: XOR<CarSpecificationCreateWithoutSpecificationInput, CarSpecificationUncheckedCreateWithoutSpecificationInput>
  }

  export type CarSpecificationCreateManySpecificationInputEnvelope = {
    data: Enumerable<CarSpecificationCreateManySpecificationInput>
    skipDuplicates?: boolean
  }

  export type CarCreateWithoutSpecificationsInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    fk_category_id: CategoryCreateNestedOneWithoutCarInput
    CarSpecification?: CarSpecificationCreateNestedManyWithoutCarInput
    CarImages?: CarImagesCreateNestedManyWithoutCarInput
    Rentals?: RentalsCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarUncheckedCreateWithoutSpecificationsInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    category_id: string
    CarSpecification?: CarSpecificationUncheckedCreateNestedManyWithoutCarInput
    CarImages?: CarImagesUncheckedCreateNestedManyWithoutCarInput
    Rentals?: RentalsUncheckedCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarCreateOrConnectWithoutSpecificationsInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutSpecificationsInput, CarUncheckedCreateWithoutSpecificationsInput>
  }

  export type CarSpecificationUpsertWithWhereUniqueWithoutSpecificationInput = {
    where: CarSpecificationWhereUniqueInput
    update: XOR<CarSpecificationUpdateWithoutSpecificationInput, CarSpecificationUncheckedUpdateWithoutSpecificationInput>
    create: XOR<CarSpecificationCreateWithoutSpecificationInput, CarSpecificationUncheckedCreateWithoutSpecificationInput>
  }

  export type CarSpecificationUpdateWithWhereUniqueWithoutSpecificationInput = {
    where: CarSpecificationWhereUniqueInput
    data: XOR<CarSpecificationUpdateWithoutSpecificationInput, CarSpecificationUncheckedUpdateWithoutSpecificationInput>
  }

  export type CarSpecificationUpdateManyWithWhereWithoutSpecificationInput = {
    where: CarSpecificationScalarWhereInput
    data: XOR<CarSpecificationUpdateManyMutationInput, CarSpecificationUncheckedUpdateManyWithoutCarEspecificationInput>
  }

  export type CarSpecificationScalarWhereInput = {
    AND?: Enumerable<CarSpecificationScalarWhereInput>
    OR?: Enumerable<CarSpecificationScalarWhereInput>
    NOT?: Enumerable<CarSpecificationScalarWhereInput>
    car_id?: StringFilter | string
    specification_id?: StringFilter | string
  }

  export type CarUpsertWithoutSpecificationsInput = {
    update: XOR<CarUpdateWithoutSpecificationsInput, CarUncheckedUpdateWithoutSpecificationsInput>
    create: XOR<CarCreateWithoutSpecificationsInput, CarUncheckedCreateWithoutSpecificationsInput>
  }

  export type CarUpdateWithoutSpecificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fk_category_id?: CategoryUpdateOneRequiredWithoutCarNestedInput
    CarSpecification?: CarSpecificationUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarUncheckedUpdateWithoutSpecificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category_id?: StringFieldUpdateOperationsInput | string
    CarSpecification?: CarSpecificationUncheckedUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUncheckedUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUncheckedUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type RentalsCreateWithoutUserInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    Car: CarCreateNestedOneWithoutRentalsInput
  }

  export type RentalsUncheckedCreateWithoutUserInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    car_id: string
  }

  export type RentalsCreateOrConnectWithoutUserInput = {
    where: RentalsWhereUniqueInput
    create: XOR<RentalsCreateWithoutUserInput, RentalsUncheckedCreateWithoutUserInput>
  }

  export type RentalsCreateManyUserInputEnvelope = {
    data: Enumerable<RentalsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserRentalCarCreateWithoutFk_user_rentalInput = {
    fk_car_rental: CarCreateNestedOneWithoutUserRentalCarInput
  }

  export type UserRentalCarUncheckedCreateWithoutFk_user_rentalInput = {
    car_id: string
  }

  export type UserRentalCarCreateOrConnectWithoutFk_user_rentalInput = {
    where: UserRentalCarWhereUniqueInput
    create: XOR<UserRentalCarCreateWithoutFk_user_rentalInput, UserRentalCarUncheckedCreateWithoutFk_user_rentalInput>
  }

  export type UserRentalCarCreateManyFk_user_rentalInputEnvelope = {
    data: Enumerable<UserRentalCarCreateManyFk_user_rentalInput>
    skipDuplicates?: boolean
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    refresh_token: string
    expires_in: Date | string
    machine_ip: string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    refresh_token: string
    expires_in: Date | string
    machine_ip: string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: Enumerable<RefreshTokenCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RentalsUpsertWithWhereUniqueWithoutUserInput = {
    where: RentalsWhereUniqueInput
    update: XOR<RentalsUpdateWithoutUserInput, RentalsUncheckedUpdateWithoutUserInput>
    create: XOR<RentalsCreateWithoutUserInput, RentalsUncheckedCreateWithoutUserInput>
  }

  export type RentalsUpdateWithWhereUniqueWithoutUserInput = {
    where: RentalsWhereUniqueInput
    data: XOR<RentalsUpdateWithoutUserInput, RentalsUncheckedUpdateWithoutUserInput>
  }

  export type RentalsUpdateManyWithWhereWithoutUserInput = {
    where: RentalsScalarWhereInput
    data: XOR<RentalsUpdateManyMutationInput, RentalsUncheckedUpdateManyWithoutRentalsInput>
  }

  export type RentalsScalarWhereInput = {
    AND?: Enumerable<RentalsScalarWhereInput>
    OR?: Enumerable<RentalsScalarWhereInput>
    NOT?: Enumerable<RentalsScalarWhereInput>
    id?: StringFilter | string
    start_date?: DateTimeFilter | Date | string
    end_date?: DateTimeNullableFilter | Date | string | null
    expect_return_date?: DateTimeFilter | Date | string
    total?: IntNullableFilter | number | null
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    user_id?: StringFilter | string
    car_id?: StringFilter | string
  }

  export type UserRentalCarUpsertWithWhereUniqueWithoutFk_user_rentalInput = {
    where: UserRentalCarWhereUniqueInput
    update: XOR<UserRentalCarUpdateWithoutFk_user_rentalInput, UserRentalCarUncheckedUpdateWithoutFk_user_rentalInput>
    create: XOR<UserRentalCarCreateWithoutFk_user_rentalInput, UserRentalCarUncheckedCreateWithoutFk_user_rentalInput>
  }

  export type UserRentalCarUpdateWithWhereUniqueWithoutFk_user_rentalInput = {
    where: UserRentalCarWhereUniqueInput
    data: XOR<UserRentalCarUpdateWithoutFk_user_rentalInput, UserRentalCarUncheckedUpdateWithoutFk_user_rentalInput>
  }

  export type UserRentalCarUpdateManyWithWhereWithoutFk_user_rentalInput = {
    where: UserRentalCarScalarWhereInput
    data: XOR<UserRentalCarUpdateManyMutationInput, UserRentalCarUncheckedUpdateManyWithoutUserRentalCarInput>
  }

  export type UserRentalCarScalarWhereInput = {
    AND?: Enumerable<UserRentalCarScalarWhereInput>
    OR?: Enumerable<UserRentalCarScalarWhereInput>
    NOT?: Enumerable<UserRentalCarScalarWhereInput>
    car_id?: StringFilter | string
    user_id?: StringFilter | string
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutRefreshTokenInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: Enumerable<RefreshTokenScalarWhereInput>
    OR?: Enumerable<RefreshTokenScalarWhereInput>
    NOT?: Enumerable<RefreshTokenScalarWhereInput>
    id?: StringFilter | string
    refresh_token?: StringFilter | string
    user_id?: StringFilter | string
    expires_in?: DateTimeFilter | Date | string
    machine_ip?: StringFilter | string
  }

  export type CategoryCreateWithoutCarInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
  }

  export type CategoryUncheckedCreateWithoutCarInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
  }

  export type CategoryCreateOrConnectWithoutCarInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCarInput, CategoryUncheckedCreateWithoutCarInput>
  }

  export type CarSpecificationCreateWithoutCarInput = {
    specification: SpecificationsCreateNestedOneWithoutCarEspecificationInput
  }

  export type CarSpecificationUncheckedCreateWithoutCarInput = {
    specification_id: string
  }

  export type CarSpecificationCreateOrConnectWithoutCarInput = {
    where: CarSpecificationWhereUniqueInput
    create: XOR<CarSpecificationCreateWithoutCarInput, CarSpecificationUncheckedCreateWithoutCarInput>
  }

  export type CarSpecificationCreateManyCarInputEnvelope = {
    data: Enumerable<CarSpecificationCreateManyCarInput>
    skipDuplicates?: boolean
  }

  export type SpecificationsCreateWithoutCarInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    CarEspecification?: CarSpecificationCreateNestedManyWithoutSpecificationInput
  }

  export type SpecificationsUncheckedCreateWithoutCarInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    CarEspecification?: CarSpecificationUncheckedCreateNestedManyWithoutSpecificationInput
  }

  export type SpecificationsCreateOrConnectWithoutCarInput = {
    where: SpecificationsWhereUniqueInput
    create: XOR<SpecificationsCreateWithoutCarInput, SpecificationsUncheckedCreateWithoutCarInput>
  }

  export type SpecificationsCreateManyCarInputEnvelope = {
    data: Enumerable<SpecificationsCreateManyCarInput>
    skipDuplicates?: boolean
  }

  export type CarImagesCreateWithoutCarInput = {
    id?: string
    image_name: string
    created_at?: Date | string
  }

  export type CarImagesUncheckedCreateWithoutCarInput = {
    id?: string
    image_name: string
    created_at?: Date | string
  }

  export type CarImagesCreateOrConnectWithoutCarInput = {
    where: CarImagesWhereUniqueInput
    create: XOR<CarImagesCreateWithoutCarInput, CarImagesUncheckedCreateWithoutCarInput>
  }

  export type CarImagesCreateManyCarInputEnvelope = {
    data: Enumerable<CarImagesCreateManyCarInput>
    skipDuplicates?: boolean
  }

  export type RentalsCreateWithoutCarInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    User: UserCreateNestedOneWithoutRentalsInput
  }

  export type RentalsUncheckedCreateWithoutCarInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    user_id: string
  }

  export type RentalsCreateOrConnectWithoutCarInput = {
    where: RentalsWhereUniqueInput
    create: XOR<RentalsCreateWithoutCarInput, RentalsUncheckedCreateWithoutCarInput>
  }

  export type RentalsCreateManyCarInputEnvelope = {
    data: Enumerable<RentalsCreateManyCarInput>
    skipDuplicates?: boolean
  }

  export type UserRentalCarCreateWithoutFk_car_rentalInput = {
    fk_user_rental: UserCreateNestedOneWithoutUserRentalCarInput
  }

  export type UserRentalCarUncheckedCreateWithoutFk_car_rentalInput = {
    user_id: string
  }

  export type UserRentalCarCreateOrConnectWithoutFk_car_rentalInput = {
    where: UserRentalCarWhereUniqueInput
    create: XOR<UserRentalCarCreateWithoutFk_car_rentalInput, UserRentalCarUncheckedCreateWithoutFk_car_rentalInput>
  }

  export type UserRentalCarCreateManyFk_car_rentalInputEnvelope = {
    data: Enumerable<UserRentalCarCreateManyFk_car_rentalInput>
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutCarInput = {
    update: XOR<CategoryUpdateWithoutCarInput, CategoryUncheckedUpdateWithoutCarInput>
    create: XOR<CategoryCreateWithoutCarInput, CategoryUncheckedCreateWithoutCarInput>
  }

  export type CategoryUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarSpecificationUpsertWithWhereUniqueWithoutCarInput = {
    where: CarSpecificationWhereUniqueInput
    update: XOR<CarSpecificationUpdateWithoutCarInput, CarSpecificationUncheckedUpdateWithoutCarInput>
    create: XOR<CarSpecificationCreateWithoutCarInput, CarSpecificationUncheckedCreateWithoutCarInput>
  }

  export type CarSpecificationUpdateWithWhereUniqueWithoutCarInput = {
    where: CarSpecificationWhereUniqueInput
    data: XOR<CarSpecificationUpdateWithoutCarInput, CarSpecificationUncheckedUpdateWithoutCarInput>
  }

  export type CarSpecificationUpdateManyWithWhereWithoutCarInput = {
    where: CarSpecificationScalarWhereInput
    data: XOR<CarSpecificationUpdateManyMutationInput, CarSpecificationUncheckedUpdateManyWithoutCarSpecificationInput>
  }

  export type SpecificationsUpsertWithWhereUniqueWithoutCarInput = {
    where: SpecificationsWhereUniqueInput
    update: XOR<SpecificationsUpdateWithoutCarInput, SpecificationsUncheckedUpdateWithoutCarInput>
    create: XOR<SpecificationsCreateWithoutCarInput, SpecificationsUncheckedCreateWithoutCarInput>
  }

  export type SpecificationsUpdateWithWhereUniqueWithoutCarInput = {
    where: SpecificationsWhereUniqueInput
    data: XOR<SpecificationsUpdateWithoutCarInput, SpecificationsUncheckedUpdateWithoutCarInput>
  }

  export type SpecificationsUpdateManyWithWhereWithoutCarInput = {
    where: SpecificationsScalarWhereInput
    data: XOR<SpecificationsUpdateManyMutationInput, SpecificationsUncheckedUpdateManyWithoutSpecificationsInput>
  }

  export type SpecificationsScalarWhereInput = {
    AND?: Enumerable<SpecificationsScalarWhereInput>
    OR?: Enumerable<SpecificationsScalarWhereInput>
    NOT?: Enumerable<SpecificationsScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    car_id?: StringFilter | string
  }

  export type CarImagesUpsertWithWhereUniqueWithoutCarInput = {
    where: CarImagesWhereUniqueInput
    update: XOR<CarImagesUpdateWithoutCarInput, CarImagesUncheckedUpdateWithoutCarInput>
    create: XOR<CarImagesCreateWithoutCarInput, CarImagesUncheckedCreateWithoutCarInput>
  }

  export type CarImagesUpdateWithWhereUniqueWithoutCarInput = {
    where: CarImagesWhereUniqueInput
    data: XOR<CarImagesUpdateWithoutCarInput, CarImagesUncheckedUpdateWithoutCarInput>
  }

  export type CarImagesUpdateManyWithWhereWithoutCarInput = {
    where: CarImagesScalarWhereInput
    data: XOR<CarImagesUpdateManyMutationInput, CarImagesUncheckedUpdateManyWithoutCarImagesInput>
  }

  export type CarImagesScalarWhereInput = {
    AND?: Enumerable<CarImagesScalarWhereInput>
    OR?: Enumerable<CarImagesScalarWhereInput>
    NOT?: Enumerable<CarImagesScalarWhereInput>
    id?: StringFilter | string
    image_name?: StringFilter | string
    car_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type RentalsUpsertWithWhereUniqueWithoutCarInput = {
    where: RentalsWhereUniqueInput
    update: XOR<RentalsUpdateWithoutCarInput, RentalsUncheckedUpdateWithoutCarInput>
    create: XOR<RentalsCreateWithoutCarInput, RentalsUncheckedCreateWithoutCarInput>
  }

  export type RentalsUpdateWithWhereUniqueWithoutCarInput = {
    where: RentalsWhereUniqueInput
    data: XOR<RentalsUpdateWithoutCarInput, RentalsUncheckedUpdateWithoutCarInput>
  }

  export type RentalsUpdateManyWithWhereWithoutCarInput = {
    where: RentalsScalarWhereInput
    data: XOR<RentalsUpdateManyMutationInput, RentalsUncheckedUpdateManyWithoutRentalsInput>
  }

  export type UserRentalCarUpsertWithWhereUniqueWithoutFk_car_rentalInput = {
    where: UserRentalCarWhereUniqueInput
    update: XOR<UserRentalCarUpdateWithoutFk_car_rentalInput, UserRentalCarUncheckedUpdateWithoutFk_car_rentalInput>
    create: XOR<UserRentalCarCreateWithoutFk_car_rentalInput, UserRentalCarUncheckedCreateWithoutFk_car_rentalInput>
  }

  export type UserRentalCarUpdateWithWhereUniqueWithoutFk_car_rentalInput = {
    where: UserRentalCarWhereUniqueInput
    data: XOR<UserRentalCarUpdateWithoutFk_car_rentalInput, UserRentalCarUncheckedUpdateWithoutFk_car_rentalInput>
  }

  export type UserRentalCarUpdateManyWithWhereWithoutFk_car_rentalInput = {
    where: UserRentalCarScalarWhereInput
    data: XOR<UserRentalCarUpdateManyMutationInput, UserRentalCarUncheckedUpdateManyWithoutUserRentalCarInput>
  }

  export type CarCreateWithoutCarImagesInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    fk_category_id: CategoryCreateNestedOneWithoutCarInput
    CarSpecification?: CarSpecificationCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsCreateNestedManyWithoutCarInput
    Rentals?: RentalsCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarUncheckedCreateWithoutCarImagesInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    category_id: string
    CarSpecification?: CarSpecificationUncheckedCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsUncheckedCreateNestedManyWithoutCarInput
    Rentals?: RentalsUncheckedCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarCreateOrConnectWithoutCarImagesInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutCarImagesInput, CarUncheckedCreateWithoutCarImagesInput>
  }

  export type CarUpsertWithoutCarImagesInput = {
    update: XOR<CarUpdateWithoutCarImagesInput, CarUncheckedUpdateWithoutCarImagesInput>
    create: XOR<CarCreateWithoutCarImagesInput, CarUncheckedCreateWithoutCarImagesInput>
  }

  export type CarUpdateWithoutCarImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fk_category_id?: CategoryUpdateOneRequiredWithoutCarNestedInput
    CarSpecification?: CarSpecificationUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarUncheckedUpdateWithoutCarImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category_id?: StringFieldUpdateOperationsInput | string
    CarSpecification?: CarSpecificationUncheckedUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUncheckedUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUncheckedUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarCreateWithoutCarSpecificationInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    fk_category_id: CategoryCreateNestedOneWithoutCarInput
    Specifications?: SpecificationsCreateNestedManyWithoutCarInput
    CarImages?: CarImagesCreateNestedManyWithoutCarInput
    Rentals?: RentalsCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarUncheckedCreateWithoutCarSpecificationInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    category_id: string
    Specifications?: SpecificationsUncheckedCreateNestedManyWithoutCarInput
    CarImages?: CarImagesUncheckedCreateNestedManyWithoutCarInput
    Rentals?: RentalsUncheckedCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarCreateOrConnectWithoutCarSpecificationInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutCarSpecificationInput, CarUncheckedCreateWithoutCarSpecificationInput>
  }

  export type SpecificationsCreateWithoutCarEspecificationInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    Car: CarCreateNestedOneWithoutSpecificationsInput
  }

  export type SpecificationsUncheckedCreateWithoutCarEspecificationInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
    car_id: string
  }

  export type SpecificationsCreateOrConnectWithoutCarEspecificationInput = {
    where: SpecificationsWhereUniqueInput
    create: XOR<SpecificationsCreateWithoutCarEspecificationInput, SpecificationsUncheckedCreateWithoutCarEspecificationInput>
  }

  export type CarUpsertWithoutCarSpecificationInput = {
    update: XOR<CarUpdateWithoutCarSpecificationInput, CarUncheckedUpdateWithoutCarSpecificationInput>
    create: XOR<CarCreateWithoutCarSpecificationInput, CarUncheckedCreateWithoutCarSpecificationInput>
  }

  export type CarUpdateWithoutCarSpecificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fk_category_id?: CategoryUpdateOneRequiredWithoutCarNestedInput
    Specifications?: SpecificationsUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarUncheckedUpdateWithoutCarSpecificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category_id?: StringFieldUpdateOperationsInput | string
    Specifications?: SpecificationsUncheckedUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUncheckedUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUncheckedUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type SpecificationsUpsertWithoutCarEspecificationInput = {
    update: XOR<SpecificationsUpdateWithoutCarEspecificationInput, SpecificationsUncheckedUpdateWithoutCarEspecificationInput>
    create: XOR<SpecificationsCreateWithoutCarEspecificationInput, SpecificationsUncheckedCreateWithoutCarEspecificationInput>
  }

  export type SpecificationsUpdateWithoutCarEspecificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Car?: CarUpdateOneRequiredWithoutSpecificationsNestedInput
  }

  export type SpecificationsUncheckedUpdateWithoutCarEspecificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutRentalsInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_user_rentalInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRentalsInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_user_rentalInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRentalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRentalsInput, UserUncheckedCreateWithoutRentalsInput>
  }

  export type CarCreateWithoutRentalsInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    fk_category_id: CategoryCreateNestedOneWithoutCarInput
    CarSpecification?: CarSpecificationCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsCreateNestedManyWithoutCarInput
    CarImages?: CarImagesCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarUncheckedCreateWithoutRentalsInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    category_id: string
    CarSpecification?: CarSpecificationUncheckedCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsUncheckedCreateNestedManyWithoutCarInput
    CarImages?: CarImagesUncheckedCreateNestedManyWithoutCarInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_car_rentalInput
  }

  export type CarCreateOrConnectWithoutRentalsInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutRentalsInput, CarUncheckedCreateWithoutRentalsInput>
  }

  export type UserUpsertWithoutRentalsInput = {
    update: XOR<UserUpdateWithoutRentalsInput, UserUncheckedUpdateWithoutRentalsInput>
    create: XOR<UserCreateWithoutRentalsInput, UserUncheckedCreateWithoutRentalsInput>
  }

  export type UserUpdateWithoutRentalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_user_rentalNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRentalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_user_rentalNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CarUpsertWithoutRentalsInput = {
    update: XOR<CarUpdateWithoutRentalsInput, CarUncheckedUpdateWithoutRentalsInput>
    create: XOR<CarCreateWithoutRentalsInput, CarUncheckedCreateWithoutRentalsInput>
  }

  export type CarUpdateWithoutRentalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fk_category_id?: CategoryUpdateOneRequiredWithoutCarNestedInput
    CarSpecification?: CarSpecificationUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarUncheckedUpdateWithoutRentalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category_id?: StringFieldUpdateOperationsInput | string
    CarSpecification?: CarSpecificationUncheckedUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUncheckedUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUncheckedUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarCreateWithoutUserRentalCarInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    fk_category_id: CategoryCreateNestedOneWithoutCarInput
    CarSpecification?: CarSpecificationCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsCreateNestedManyWithoutCarInput
    CarImages?: CarImagesCreateNestedManyWithoutCarInput
    Rentals?: RentalsCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateWithoutUserRentalCarInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
    category_id: string
    CarSpecification?: CarSpecificationUncheckedCreateNestedManyWithoutCarInput
    Specifications?: SpecificationsUncheckedCreateNestedManyWithoutCarInput
    CarImages?: CarImagesUncheckedCreateNestedManyWithoutCarInput
    Rentals?: RentalsUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarCreateOrConnectWithoutUserRentalCarInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutUserRentalCarInput, CarUncheckedCreateWithoutUserRentalCarInput>
  }

  export type UserCreateWithoutUserRentalCarInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    Rentals?: RentalsCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRentalCarInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    Rentals?: RentalsUncheckedCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRentalCarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRentalCarInput, UserUncheckedCreateWithoutUserRentalCarInput>
  }

  export type CarUpsertWithoutUserRentalCarInput = {
    update: XOR<CarUpdateWithoutUserRentalCarInput, CarUncheckedUpdateWithoutUserRentalCarInput>
    create: XOR<CarCreateWithoutUserRentalCarInput, CarUncheckedCreateWithoutUserRentalCarInput>
  }

  export type CarUpdateWithoutUserRentalCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fk_category_id?: CategoryUpdateOneRequiredWithoutCarNestedInput
    CarSpecification?: CarSpecificationUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutUserRentalCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category_id?: StringFieldUpdateOperationsInput | string
    CarSpecification?: CarSpecificationUncheckedUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUncheckedUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUncheckedUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUncheckedUpdateManyWithoutCarNestedInput
  }

  export type UserUpsertWithoutUserRentalCarInput = {
    update: XOR<UserUpdateWithoutUserRentalCarInput, UserUncheckedUpdateWithoutUserRentalCarInput>
    create: XOR<UserCreateWithoutUserRentalCarInput, UserUncheckedCreateWithoutUserRentalCarInput>
  }

  export type UserUpdateWithoutUserRentalCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Rentals?: RentalsUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRentalCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Rentals?: RentalsUncheckedUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRefreshTokenInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    Rentals?: RentalsCreateNestedManyWithoutUserInput
    UserRentalCar?: UserRentalCarCreateNestedManyWithoutFk_user_rentalInput
  }

  export type UserUncheckedCreateWithoutRefreshTokenInput = {
    id?: string
    name: string
    username: string
    password: string
    email: string
    driver_license: string
    isAdmin?: boolean
    created_at?: Date | string
    avatar?: string | null
    Rentals?: RentalsUncheckedCreateNestedManyWithoutUserInput
    UserRentalCar?: UserRentalCarUncheckedCreateNestedManyWithoutFk_user_rentalInput
  }

  export type UserCreateOrConnectWithoutRefreshTokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
  }

  export type UserUpsertWithoutRefreshTokenInput = {
    update: XOR<UserUpdateWithoutRefreshTokenInput, UserUncheckedUpdateWithoutRefreshTokenInput>
    create: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
  }

  export type UserUpdateWithoutRefreshTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Rentals?: RentalsUpdateManyWithoutUserNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_user_rentalNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    driver_license?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Rentals?: RentalsUncheckedUpdateManyWithoutUserNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_user_rentalNestedInput
  }

  export type CarCreateManyFk_category_idInput = {
    id?: string
    name: string
    description: string
    daily_rate: number
    available?: boolean
    license_plate: string
    fine_amount: number
    brand: string
    created_at?: Date | string
  }

  export type CarUpdateWithoutFk_category_idInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    CarSpecification?: CarSpecificationUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarUncheckedUpdateWithoutFk_category_idInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    CarSpecification?: CarSpecificationUncheckedUpdateManyWithoutCarNestedInput
    Specifications?: SpecificationsUncheckedUpdateManyWithoutCarNestedInput
    CarImages?: CarImagesUncheckedUpdateManyWithoutCarNestedInput
    Rentals?: RentalsUncheckedUpdateManyWithoutCarNestedInput
    UserRentalCar?: UserRentalCarUncheckedUpdateManyWithoutFk_car_rentalNestedInput
  }

  export type CarUncheckedUpdateManyWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    daily_rate?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    license_plate?: StringFieldUpdateOperationsInput | string
    fine_amount?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarSpecificationCreateManySpecificationInput = {
    car_id: string
  }

  export type CarSpecificationUpdateWithoutSpecificationInput = {
    car?: CarUpdateOneRequiredWithoutCarSpecificationNestedInput
  }

  export type CarSpecificationUncheckedUpdateWithoutSpecificationInput = {
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type CarSpecificationUncheckedUpdateManyWithoutCarEspecificationInput = {
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type RentalsCreateManyUserInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    car_id: string
  }

  export type UserRentalCarCreateManyFk_user_rentalInput = {
    car_id: string
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    refresh_token: string
    expires_in: Date | string
    machine_ip: string
  }

  export type RentalsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Car?: CarUpdateOneRequiredWithoutRentalsNestedInput
  }

  export type RentalsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type RentalsUncheckedUpdateManyWithoutRentalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserRentalCarUpdateWithoutFk_user_rentalInput = {
    fk_car_rental?: CarUpdateOneRequiredWithoutUserRentalCarNestedInput
  }

  export type UserRentalCarUncheckedUpdateWithoutFk_user_rentalInput = {
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserRentalCarUncheckedUpdateManyWithoutUserRentalCarInput = {
    car_id?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_in?: DateTimeFieldUpdateOperationsInput | Date | string
    machine_ip?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_in?: DateTimeFieldUpdateOperationsInput | Date | string
    machine_ip?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenUncheckedUpdateManyWithoutRefreshTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    expires_in?: DateTimeFieldUpdateOperationsInput | Date | string
    machine_ip?: StringFieldUpdateOperationsInput | string
  }

  export type CarSpecificationCreateManyCarInput = {
    specification_id: string
  }

  export type SpecificationsCreateManyCarInput = {
    id?: string
    name: string
    description: string
    created_at?: Date | string
  }

  export type CarImagesCreateManyCarInput = {
    id?: string
    image_name: string
    created_at?: Date | string
  }

  export type RentalsCreateManyCarInput = {
    id?: string
    start_date?: Date | string
    end_date?: Date | string | null
    expect_return_date: Date | string
    total?: number | null
    created_at?: Date | string
    updated_at?: Date | string | null
    user_id: string
  }

  export type UserRentalCarCreateManyFk_car_rentalInput = {
    user_id: string
  }

  export type CarSpecificationUpdateWithoutCarInput = {
    specification?: SpecificationsUpdateOneRequiredWithoutCarEspecificationNestedInput
  }

  export type CarSpecificationUncheckedUpdateWithoutCarInput = {
    specification_id?: StringFieldUpdateOperationsInput | string
  }

  export type CarSpecificationUncheckedUpdateManyWithoutCarSpecificationInput = {
    specification_id?: StringFieldUpdateOperationsInput | string
  }

  export type SpecificationsUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    CarEspecification?: CarSpecificationUpdateManyWithoutSpecificationNestedInput
  }

  export type SpecificationsUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    CarEspecification?: CarSpecificationUncheckedUpdateManyWithoutSpecificationNestedInput
  }

  export type SpecificationsUncheckedUpdateManyWithoutSpecificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarImagesUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarImagesUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarImagesUncheckedUpdateManyWithoutCarImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    image_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalsUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutRentalsNestedInput
  }

  export type RentalsUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expect_return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserRentalCarUpdateWithoutFk_car_rentalInput = {
    fk_user_rental?: UserUpdateOneRequiredWithoutUserRentalCarNestedInput
  }

  export type UserRentalCarUncheckedUpdateWithoutFk_car_rentalInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}